<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="StudentMapper">
	
	<!--学员主表 -->
	<sql id="tableName">
		edu_student
	</sql>
	<!--学员字表 -->
	<sql id="tableName2">
		edu_student_append
	</sql>
	<!--学员、班级 -->
	<sql id="tableName3">
		edu_grades_student
	</sql>
	
	<!-- 字段 -->
	<sql id="Field">
		id,
		xm,
		nl,
		xb,
		mz,
		hjdz,
		czdz,
		sfz,
		zt,
		s_id,
		s_name,
		c_id,
		c_name,
		l_id,
		l_name,
		create_date,
		create_id,
		user_id,
		class_committee,
		group_name,
		group_leader,
		phone,
		semester_id,
		stu_number,
		sign_gov,
		admitted_party_date,
		edu_degree,
		join_school_date,
		tel,
		retire_date,
		retire_number,
		work_status,
		family_con_name,
		family_con_tel,
		sec_con,
		sec_con_tel,
		address,
		disease,
		photo,
		checkin_date,
		checkin_type,
		birth_day,
		province,
		city,
		country
	</sql>
	
	<!-- 字段 -->
	<sql id="Field3">
		id,
		grades_id,
		student_id,
		create_date,
		creator_id,
		status,
		lesson_periods,
		semester_id
	</sql>
	
	<!-- 字段值 -->
	<sql id="FieldValue3">
		#{id},
		#{grades_id},
		#{student_id},
		#{create_date},
		#{creator_id},
		#{status},
		#{lesson_periods},
		#{semester_id}
	</sql>
	
	<!-- 字段值 -->
	<sql id="FieldValue">
		#{id},
		#{xm},
		#{nl},
		#{xb},
		#{mz},
		#{hjdz},
		#{czdz},
		#{sfz},
		#{zt},
		#{s_id},
		#{s_name},
		#{c_id},
		#{c_name},
		#{l_id},
		#{l_name},
		#{create_date},
		#{create_id},
		#{user_id},
		#{class_committee},
		#{group_name},
		#{group_leader},
		#{phone},
		#{semester_id},
		#{stu_number},
		#{sign_gov},
		#{admitted_party_date},
		#{edu_degree},
		#{join_school_date},
		#{tel},
		#{retire_date},
		#{retire_number},
		#{work_status},
		#{family_con_name},
		#{family_con_tel},
		#{sec_con},
		#{sec_con_tel},
		#{address},
		#{disease},
		#{photo},
		#{checkin_date},
		#{checkin_type},
		#{birth_day},
		#{province},
		#{city},
		#{country}
	</sql>
	
	<!-- 新增-->
	<insert id="save" parameterType="pd">
		insert into 
	<include refid="tableName"></include>
		(
	<include refid="Field"></include>
		) values (
	<include refid="FieldValue"></include>
		)
	</insert>
	
	<!-- 新增新学员详细信息-->
	<insert id="saveInfo" parameterType="com.zhimu.dao.entity.student.Student">
		insert into 
	<include refid="tableName"></include>
		(
		id,
		xm,
		nl,
		xb,
		mz,
		hjdz,
		sfz,
		zt,
		s_id,
		s_name,
		create_date,
		create_id,
		user_id,
		phone,
		tel,
		family_con_name,
		family_con_tel,
		sec_con,
		sec_con_tel,
		address,
		disease,
		photo,
		birth_day,
		province,
		city,
		country,
		checkin_type,
		checkin_date
		) values (
		#{id},
		#{xm},
		#{nl},
		#{xb},
		#{mz},
		#{hjdz},
		#{sfz},
		#{zt},
		#{sId},
		#{sName},
		#{createDate},
		#{createId},
		#{userId},
		#{phone},
		#{tel},
		#{familyConName},
		#{familyConTel},
		#{secCon},
		#{secConTel},
		#{address},
		#{disease},
		#{photo},
		#{birthDay},
		#{province},
		#{city},
		#{country},
		#{checkinType},
		#{checkinDate}
		)
	</insert>
	
	<!-- 新增学员报名信息-->
	<insert id="saveGrades" parameterType="pd">
		insert into 
	<include refid="tableName3"></include>
		(
	<include refid="Field3"></include>
		) values (
	<include refid="FieldValue3"></include>
		)
	</insert>
	
	<!-- 注册-->
	<insert id="register" parameterType="pd">
		insert into 
	<include refid="tableName"></include>
		(
			id,xm,phone,create_date,create_id,user_id,semester_id,checkin_date,checkin_type,zt,stu_number
		) values (
			#{id},#{xm},#{phone},#{create_date},#{create_id},#{user_id},#{semester_id},#{checkin_date},#{checkin_type},#{zt},#{stu_number}
		)
	</insert>
	
	<!-- 删除-->
	<delete id="delete" parameterType="pd">
		delete from
		<include refid="tableName"></include>
		where 
			id = #{id}
	</delete>
	
	<!-- 修改 -->
	<update id="edit" parameterType="com.zhimu.dao.entity.student.Student">
		update
		<include refid="tableName"></include>
		set 
			xm = #{xm},
			xb=#{xb},
			nl=#{nl},
			birth_day=#{birthDay},
			sfz = #{sfz},
			phone=#{phone},
			disease=#{disease},
			hjdz=#{hjdz},
			mz=#{mz},
			family_con_name=#{familyConName},
			family_con_tel=#{familyConTel},
			sec_con=#{secCon},
			sec_con_tel=#{secConTel},
			tel=#{tel},
			province=#{province},
			city=#{city},
			country=#{country},
			address=#{address},
			photo=#{photo}
		where 
			id = #{id}
	</update>

	<!-- 修改 -->
	<update id="update" parameterType="pd">
		update
		<include refid="tableName"></include>
		set
			xm = #{xm},
			xb=#{xb},
			nl=#{nl},
			birth_day=#{birthDay},
			sfz = #{sfz},
			phone=#{phone},
			disease=#{disease},
			hjdz=#{hjdz},
			mz=#{mz},
			family_con_name=#{familyConName},
			family_con_tel=#{familyConTel},
			sec_con=#{secCon},
			sec_con_tel=#{secConTel},
			tel=#{tel},
			province=#{province},
			city=#{city},
			country=#{country},
			address=#{address},
			photo=#{photo}
		where
			id = #{id}
	</update>
	
	<!-- 通过ID获取数据 -->
	<select id="findById" parameterType="pd" resultType="pd">
		select 
		<include refid="Field"></include>
		from 
		<include refid="tableName"></include>
		where 
			id = #{id}
	</select>
	<!-- 通过SFZ获取数据 -->
	<select id="findBySfz" parameterType="pd" resultType="pd">
		select 
		<include refid="Field"></include>
		from 
		<include refid="tableName"></include>
		where 
			sfz = #{sfz}
	</select>
	<!-- 通过学籍号获取数据 -->
	<select id="findByStuNumber" parameterType="pd" resultType="pd">
		select 
		<include refid="Field"></include>
		from 
		<include refid="tableName"></include>
		where 
			stu_number = #{stu_number}
	</select>
	
	<!-- 列表 -->
	<select id="datalistPage" parameterType="page" resultType="pd">
		select
		s.id,
		s.xm,
		s.semester_id,
		s.sfz,
		s.checkin_date,
		m.name,
		s.checkin_type,
		1 class_numz
		from
		<include refid="tableName"></include> s,edu_semester m
		where
			1=1
			and s.semester_id=m.id
		<if test="pd.keywords != null and pd.keywords != ''"><!-- 关键词检索 -->
			and
				(
				 name LIKE ('%'+#{pd.keywords}+'%')
				 or
				 sfz LIKE ('%'+#{pd.keywords}+'%')
				 or
				 checkin_type like ('%'+#{pd.keywords}+'%')
				 or
				 semester_id =#{pd.keywords}
				)
		</if>
		order by s.create_date
	</select>


	<!-- 列表 -->
	<select id="studentByGradeslistPage" parameterType="page" resultType="pd">
		SELECT
		s.id,
		s.xm,
		s.phone,
		s.sfz,
		gs.class_committee,
		gs.group_leader,
		gs.group_id,
		gs.grades_id,
		gg.group_name,
		gs.id sid

		FROM
		dbo.edu_student AS s
		LEFT JOIN dbo.edu_grades_student AS gs ON s.id = gs.student_id
		LEFT JOIN dbo.edu_grades_group AS gg ON gs.grades_id = gg.grades_id and gg.id = gs.group_id
		where
		gs.status=1 and
		<foreach item="item" index="index" collection="pd.gradesIds" open="(" separator=" or" close=")">
			gs.grades_id  LIKE ('%'+'${item}'+'%')
		</foreach>


		<if test="pd.keywords != null and pd.keywords != ''"><!-- 关键词检索 -->
			and
			(
			s.xm LIKE ('%'+#{pd.keywords}+'%')
			or
			s.sfz LIKE ('%'+#{pd.keywords}+'%')
			)
		</if>
	</select>


	<!-- 修改 -->
	<update id="editClassCommittee" parameterType="pd">
		update
		edu_grades_student
		set
		class_committee = #{class_committee}
		where
		id = #{id}
	</update>

	<select id="getAllStudentBycId" parameterType="pd" resultType="pd">
		SELECT
		s.id,
		s.xm,
		s.phone,
		s.sfz,
		gs.class_committee,
		gs.group_leader,
		gs.group_id,
		gs.grades_id,
		gg.group_name,
		gs.id sid

		FROM
		dbo.edu_student AS s
		LEFT JOIN dbo.edu_grades_student AS gs ON s.id = gs.student_id
		LEFT JOIN dbo.edu_grades_group AS gg ON gs.grades_id = gg.grades_id and gg.id = gs.group_id
		where
		gs.status=1 and
	<foreach item="item" index="index" collection="gradesIds" open="(" separator=" or" close=")">
		gs.grades_id  LIKE ('%'+'${item}'+'%')
	</foreach>
	</select>


	<select id="allGroupById" parameterType="String" resultType="pd">
		SELECT
		gg.id,
		gg.group_name,
		gg.grades_id

		FROM
		dbo.edu_grades_group AS gg

		where gg.grades_id=#{gId}

	</select>

	<update id="editStudentGroup" parameterType="pd">
		update
		edu_grades_student
		set
		group_id=#{group_id},
		group_leader=#{group_leader}
		where
		grades_id = #{c_id}
		and
		student_id=#{student_id}
		and
		id = #{sid}
	</update>

	<update id="editStudentGroupLeader" parameterType="pd">
		update
		edu_grades_student
		set
		group_leader='0'
		where
		 grades_id = #{c_id}
		and
		group_id=#{group_id}
		AND
		group_leader='1'
	</update>

	<update id="editStudentGroupAll" parameterType="pd">
		update
		edu_grades_student
		set
		group_leader='',
		group_id=''
		where
		grades_id =#{c_id}
		and
		group_id=#{group_id}
	</update>
	<delete id="delStudentGroupAll" parameterType="pd">
		DELETE FROM edu_grades_group where id=#{group_id}
	</delete>
	<!-- 修改 -->
	<update id="editGroup" parameterType="pd">
		update
		edu_grades_student
		set
		group_id = #{group_id},
		GROUP_leader = '0'
		where
		id = #{id}
	</update>
	<!-- 写入学员选课信息 -->
	<update id="editStudentEnroll" parameterType="pd">
		update
		<include refid="tableName"></include>
		set
			s_id=( case when s_id is null then #{s_id} else   case charindex(#{s_id},s_id) when 0 then s_id+','+#{s_id} else s_id end end),
			s_name=( case when s_name is null then #{s_name} else  case charindex(#{s_name},s_name) when 0 then s_name+','+#{s_name} else s_name end  end),
			c_id=( case when c_id is null then #{c_id} else  case charindex(#{c_id},c_id) when 0 then c_id+','+#{c_id} else c_id end  end),
			c_name=( case when c_name is null then #{c_name} else  case charindex(#{c_name},c_name) when 0 then c_name+','+#{c_name} else c_name end  end),
			l_id=( case when l_id is null then #{l_id} else  case charindex(#{l_id},l_id) when 0 then l_id+','+#{l_id} else l_id end  end), 
			semester_id=( case when semester_id is null then #{semester_id} else  case charindex(#{semester_id},semester_id) when 0 then semester_id+','+#{semester_id} else semester_id end  end) 
		where
		id = #{id}
	</update>
	<!-- 更新学员选课信息 -->
	<update id="editStudentGrades" parameterType="pd">
		update
		<include refid="tableName"></include>
		set
			c_id=replace(c_id,#{grades_id},'') ,
			zt=#{status}
		where
		id = #{id};
		update
		<include refid="tableName3"></include>
		set
			status=#{status}
		where
		grades_id = #{grades_id} and student_id=#{id}
	</update>
	
	<!--根据用户id查找_lwc-->
	<select id="findByUser" parameterType="String" resultType="pd">
		select
			id,c_id,photo,semester_id,xm,xb,mz,nl,birth_day,sfz,hjdz,mz,phone,tel,disease,province,city,country,address,family_con_name,family_con_tel,sec_con,sec_con_tel,[type]=('学生')
		from
			<include refid="tableName"></include>
		where
			1=1 AND zt != 3 AND
			user_id  = #{userId}
	</select>

	<!--根据学校id查找对应所有的学生用户id_lwc-->
	<select id="findUidBySid" resultType="String">
		select
			<include refid="tableName"></include>
		from
			<include refid="tableName"></include>
		where
			1=1 AND zt != 3 AND
			s_id
		IN
		<foreach collection="sIds" separator="," open="(" close=")" item="schoolId">
			#{schoolId}
		</foreach>
	</select>

	<!--根据学校id查找对应所有的学生_lwc-->
	<select id="findBySid" parameterType="pd" resultType="pd">
		select
			id,
			xm AS name,
			nl,
			xb,
			mz,
			hjdz,
			czdz,
			sfz,
			zt,
			s_id,
			s_name,
			c_id,
			c_name,
			l_id,
			l_name,
			create_date,
			create_id,
			user_id,
			class_committee,
			group_name,
			group_leader,
			phone,
			semester_id,
			stu_number,
			sign_gov,
			admitted_party_date,
			edu_degree,
			join_school_date,
			tel,
			[type]=('学生')
		from
			<include refid="tableName"></include>
		where
			1=1 AND zt != 3 AND

		<foreach collection="array" separator="or" open="(" close=")" item="schoolId">
			s_id LIKE ('%'+#{schoolId}+'%')
		</foreach>
		<if test="keywords != null and keywords != ''"><!-- 关键词检索 -->
			and
			(
			xm LIKE ('%'+#{keywords}+'%')
			or
			sfz LIKE ('%'+#{keywords}+'%')
			)
		</if>
	</select>

	<!--根据班级id查找对应所有的学生信息_lwc-->
	<select id="findByCid" resultType="pd">
		select
			<include refid="Field"></include>
		from
			<include refid="tableName"></include>
		where
			1=1 AND zt != 3 AND
		<foreach collection="array" separator="or" open="(" close=")" item="cId">
			c_id LIKE ('%'+#{cId}+'%')
		</foreach>
	</select>
<<<<<<< .mine
	<!--查询学生是否为班委和组织-->
	<select id="findStudentCommitteeById" parameterType="pd" resultType="pd">
		SELECT
			s.id,
			s.class_committee,
			s.group_leader

		FROM
		dbo.edu_grades_student AS s

		where id =#{sid}

	</select>

=======
	
	
	<!--根据班级id和学员ID查找-->
	<select id="findByCidAndStuId" parameterType="pd"  resultType="pd">
		select
			<include refid="Field3"></include>
		from
			<include refid="tableName3"></include>
		where
			1=1 AND status = 1 AND
			student_id=#{student_id}
			<if test="grades_id != null and grades_id != ''"><!-- 关键词检索 -->
				and grades_id=#{grades_id}
			</if>
	</select>
	
	<!-- 根据学员ID查询学员已读班级时间表 -->
	<select id="findByScheduleStuId" parameterType="pd"  resultType="pd">
		SELECT
			id
		FROM
			edu_schedule_details d
		WHERE
			d.grades_id IN(
				SELECT
					s.grades_id
				FROM
					edu_grades_student s
				WHERE
					s.student_id =#{student_id}
					and s.status='1'
			)
		 and d.week= #{week}
		 and d.period=#{period}
		 and 
		 (<![CDATA[ d.start_time >=CONVERT(varchar(100), #{startTime}, 24)  AND d.start_time <= CONVERT(varchar(100), #{endTime}, 24) ]]> )
		OR (<![CDATA[d.start_time <= CONVERT(varchar(100), #{startTime}, 24)  AND d.end_time >= CONVERT(varchar(100), #{endTime}, 24)]]> )
		OR (<![CDATA[d.end_time >= CONVERT(varchar(100), #{startTime}, 24)  AND d.end_time <= CONVERT(varchar(100), #{endTime}, 24)]]> )
		</select>
>>>>>>> .r653
	<!-- 新增-->
	<insert id="addStudentGroup" parameterType="pd">
		insert into
		edu_grades_group
		(
		  id,group_name,grades_id
		) values (
		 #{group_id},#{group_name},#{c_id}
		)
	</insert>

	<!--  -->
</mapper>