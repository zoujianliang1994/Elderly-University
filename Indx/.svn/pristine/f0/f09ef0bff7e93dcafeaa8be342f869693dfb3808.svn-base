package com.zhimu.service.manager.system.user.impl;

import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.zhimu.commons.utils.FtpUtils;
import com.zhimu.commons.utils.PageData;
import com.zhimu.dao.DaoSupport;
import com.zhimu.dao.entity.system.Page;
import com.zhimu.dao.entity.system.Role;
import com.zhimu.dao.entity.system.User;
import com.zhimu.service.manager.system.user.UserManager;

/**
 * 系统用户
 * 
 * @author wy
 */
@Service("userService")
public class UserService implements UserManager {

	@Resource(name = "daoSupport")
	private DaoSupport dao;

	/**
	 * 登录判断
	 */
	@Override
	public PageData getUserByNameAndPwd(PageData pd) throws Exception {
		return (PageData) dao.findForObject("UserMapper.getUserInfo", pd);
	}

	/**
	 * 更新登录时间
	 */
	@Override
	public void updateLastLogin(PageData pd) throws Exception {
		dao.update("UserMapper.updateLastLogin", pd);
	}

	/**
	 * 通过用户ID获取用户信息和角色信息
	 */
	@Override
	public User getUserAndRoleById(String USER_ID) throws Exception {
		return (User) dao.findForObject("UserMapper.getUserAndRoleById", USER_ID);
	}

	/**
	 * 通过USERNAEME获取数据
	 */
	@Override
	public PageData findByUsername(PageData pd) throws Exception {
		return (PageData) dao.findForObject("UserMapper.findByUsername", pd);
	}

	/**
	 * 列出某角色下的所有用户
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<PageData> listAllUserByRoldId(PageData pd) throws Exception {
		return (List<PageData>) dao.findForList("UserMapper.listAllUserByRoldId", pd);

	}

	/**
	 * 保存用户IP
	 */
	@Override
	public void saveIP(PageData pd) throws Exception {
		dao.update("UserMapper.saveIP", pd);
	}

	/**
	 * 用户列表
	 */
	@Override
	@SuppressWarnings("unchecked")
	public List<PageData> listUsers(Page page) throws Exception {
		return (List<PageData>) dao.findForList("UserMapper.userlistPage", page);
	}

	/**
	 * 通过邮箱获取数据
	 */
	@Override
	public PageData findByUE(PageData pd) throws Exception {
		return (PageData) dao.findForObject("UserMapper.findByUE", pd);
	}

	/**
	 * 通过编号获取数据
	 */
	@Override
	public PageData findByUN(PageData pd) throws Exception {
		return (PageData) dao.findForObject("UserMapper.findByUN", pd);
	}

	/**
	 * 通过id获取数据
	 */
	@Override
	public PageData findById(PageData pd) throws Exception {
		return (PageData) dao.findForObject("UserMapper.findById", pd);
	}

	private String returnPicturePath(PageData pd) throws Exception {
		// 保存图片信息
		MultipartFile files = (MultipartFile) pd.get("files");
		String PICTURES_FLAG = pd.getString("PICTURES_FLAG");
		String picturePath = "";
		if (files != null && "1".equals(PICTURES_FLAG)) {
			picturePath = FtpUtils.uploadImg(FtpUtils.multipartToFile(files));
		} else {
			picturePath = pd.getString("PICTURES_PATH");
		}
		return picturePath;
	}

	/**
	 * 保存用户
	 */
	@Override
	public void saveU(PageData pd) throws Exception {
		pd.put("PICTURES_PATH", returnPicturePath(pd));
		dao.save("UserMapper.saveU", pd);
	}

	/**
	 * 修改用户
	 */
	@Override
	public void editU(PageData pd) throws Exception {
		pd.put("PICTURES_PATH", returnPicturePath(pd));
		dao.update("UserMapper.editU", pd);
	}

	/**
	 * 删除用户
	 */
	@Override
	public void deleteU(PageData pd) throws Exception {
		dao.delete("UserMapper.deleteU", pd);
	}

	/**
	 * 批量删除用户
	 */
	@Override
	public void deleteAllU(String[] USER_IDS) throws Exception {
		dao.delete("UserMapper.deleteAllU", USER_IDS);
	}

	/**
	 * 用户列表(全部)
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<PageData> listAllUser(PageData pd) throws Exception {
		return (List<PageData>) dao.findForList("UserMapper.listAllUser", pd);
	}

	/**
	 * 获取总数
	 */
	@Override
	public PageData getUserCount(String value) throws Exception {
		return (PageData) dao.findForObject("UserMapper.getUserCount", value);
	}

	@Override
	public void updateOnline(PageData pd) throws Exception {
		dao.update("UserMapper.updateOnline", pd);
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<Role> findByAllRolePermisson(String[] ROLEID) throws Exception {
		return (List<Role>) dao.findForList("UserMapper.findByAllRolePermisson", ROLEID);
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<User> listUsersByRoleId(PageData pd) throws Exception {
		return (List<User>) this.dao.findForList("UserMapper.listUsersByRoleId", pd);
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<User> listUsersByName(String keyword) throws Exception {
		return (List<User>) this.dao.findForList("UserMapper.listUsersByName", keyword);
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<PageData> findByRoleAndDept(PageData pd) throws Exception {
		return (List<PageData>) this.dao.findForList("UserMapper.findByRoleAndDept", pd);
	}

	@Override
	public boolean hasUsers(String unitCode) throws Exception {
		@SuppressWarnings("unchecked")
		List<PageData> pageList = (List<PageData>) dao.findForList("UserMapper.getByUnitCode", unitCode);
		return !(null == pageList || pageList.size() <= 0);
	}

	@Override
	public void editPassWord(PageData pd) throws Exception {
		dao.update("UserMapper.updatePassWord", pd);
	}

	@Override
	public void updateStatus(PageData pd) throws Exception {
		dao.update("UserMapper.updateStatus", pd);
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<PageData> listAllUserBySid(PageData pd) throws Exception {
		return (List<PageData>) dao.findForList("UserMapper.listAllUserBySid", pd);
	}

	@Override
	public void editUserSchool(PageData pd) throws Exception {
		dao.update("UserMapper.editUserSchool", pd);
	}

}
