package com.zhimu.controller.manager.system.user;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import net.sf.json.JSONArray;

import org.apache.commons.lang.StringUtils;
import org.apache.shiro.crypto.hash.SimpleHash;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.zhimu.commons.utils.AppUtil;
import com.zhimu.commons.utils.AreaCodeUtils;
import com.zhimu.commons.utils.ErrorUtils;
import com.zhimu.commons.utils.PageData;
import com.zhimu.controller.manager.base.BaseController;
import com.zhimu.dao.entity.system.Page;
import com.zhimu.dao.entity.system.Role;
import com.zhimu.dao.entity.system.Section;
import com.zhimu.dao.entity.system.User;
import com.zhimu.service.manager.system.department.DepartmentManager;
import com.zhimu.service.manager.system.role.RoleManager;
import com.zhimu.service.manager.system.section.SectionManager;
import com.zhimu.service.manager.system.user.UserManager;

/**
 * 用户管理
 */
@Controller
@RequestMapping(value = "/user")
public class UserController extends BaseController {
	@Resource(name = "userService")
	private UserManager userService;
	@Resource(name = "roleService")
	private RoleManager roleService;
	@Resource(name = "sectionService")
	private SectionManager sectionService;
	@Resource(name = "departmentService")
	private DepartmentManager departmentService;

	@RequestMapping(value = "/getSectionByDep", method = RequestMethod.POST)
	@ResponseBody
	public Object getSectionByDep() throws Exception {
		PageData pd = new PageData();
		List<Section> list = null;
		try {
			pd = this.getPageData();
			list = sectionService.listSectionByDep(pd);

		} catch (Exception e) {
			logger.error(e.toString(), e);
		}
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("list", list);
		return AppUtil.returnObject(new PageData(), map);
	}

	/**
	 * 显示用户列表
	 */
	@RequestMapping(value = "/listUsers")
	public ModelAndView listUsers(Page page) {
		ModelAndView mv = this.getModelAndView();
		PageData pd = getPageData();
		String keywords = pd.getString("keywords"); // 关键词检索条件
		if (null != keywords && !"".equals(keywords)) {
			pd.put("keywords", keywords.trim());
		}

		String xzqh_code = pd.getString("xzqh");
		if ("".equals(xzqh_code) || null == xzqh_code) {
			xzqh_code = pd.getString("xzqh_code");
		}
		User userInfo = getUserInfo();
		try {
			if (StringUtils.isEmpty(xzqh_code) && null != userInfo) {
				xzqh_code = userInfo.getAreaCode();
			}
			// 选择机构list
			String parentId = userInfo.getpId();
			String areaCode = xzqh_code;
			if (StringUtils.isEmpty(areaCode)) {
				areaCode = userInfo.getAreaCode();
			} else {
				// 还原areaCode
				if (areaCode.length() != 12) {
					while (true) {
						areaCode = areaCode + "0";
						if (areaCode.length() == 12) {
							break;
						}
					}
				}
				// 查询父级id
				List<PageData> listDep = this.departmentService.findByAreaCode(areaCode);
				if (null != listDep && listDep.size() > 0) {
					parentId = listDep.get(0).getString("DEPARTMENT_ID");
				}
			}
			// 查询机构
			JSONArray arr = JSONArray.fromObject(departmentService.listByPid(parentId, "", areaCode));
			String json = arr.toString();
			json = json.replaceAll("DEPARTMENT_ID", "id").replaceAll("PARENT_ID", "pId").replaceAll("NAME", "title").replaceAll("subDepartment", "children").replaceAll("hasDepartment", "hasNext");

			pd.put("json", json);

			// 获取内设机构
			String selDepId = pd.getString("selDepId");
			if (!StringUtils.isEmpty(selDepId)) {
				// 查询内设机构
				pd.put("depId", selDepId);
				List<Section> list = sectionService.listSectionByDep(pd);
				pd.put("section", list);
			}
			pd.put("xzqh_code", xzqh_code.length() == 12 ? (AreaCodeUtils.returnXzqh(xzqh_code)) : xzqh_code);
			pd.put("type", "1");
			String status = pd.getString("status");
			if ("".equals(status) || null == status) {
				status = "0";
			}
			if (!StringUtils.isEmpty(selDepId) && StringUtils.isEmpty(pd.getString("sectionId"))) {
				// 查询内设机构
				pd.put("sectionIds", selDepId);
			}

			pd.put("status", status);
			page.setPd(pd);
			List<PageData> userList = userService.listUsers(page); // 列出用户列表
			mv.addObject("userList", userList);
			mv.addObject("pd", pd);
			mv.addObject("userName", userInfo.getUSERNAME());
			mv.setViewName("system/user/user_list");
		} catch (Exception e) {
			logger.error(ErrorUtils.getErrorMessage(e, "用户列表异常"));
		}
		return mv;
	}

	/**
	 * 去新增用户页面
	 */
	@RequestMapping(value = "/goAddU")
	public ModelAndView goAddU() {
		ModelAndView mv = this.getModelAndView();
		PageData pd = getPageData();
		try {
			mv.addObject("msg", "saveU");
			mv.addObject("pd", pd);
			mv.addObject("isAdmin", "admin".equals(getUserInfo().getUSERNAME()) ? true : false);
			mv.setViewName("system/user/user_edit");
		} catch (Exception e) {
			logger.error(ErrorUtils.getErrorMessage(e, "打开用户新增页面异常!"));
		}
		return mv;
	}

	/**
	 * 保存用户
	 */
	@RequestMapping(value = "/saveU", method = RequestMethod.POST)
	@ResponseBody
	public Object saveU() {
		Map<String, String> map = new HashMap<String, String>();
		PageData pd = getPageData();
		String msg = "";
		try {
			pd.put("USER_ID", this.get32UUID()); // ID 主键
			pd.put("STATUS", "0");
			pd.put("PASSWORD", new SimpleHash("SHA-1", pd.getString("USERNAME"), pd.getString("PASSWORD")).toString()); // 密码加密
			if (null == userService.findByUsername(pd)) { // 判断用户名是否存在
				userService.saveU(pd); // 执行保存
				msg = "success";
			} else {
				msg = "fail";
			}
		} catch (Exception e) {
			msg = "error";
			logger.error(ErrorUtils.getErrorMessage(e, "保存用户异常!"));
		}
		map.put("result", msg);
		return AppUtil.returnObject(new PageData(), map);
	}

	/**
	 * 去修改用户页面
	 */
	@RequestMapping(value = "/goEditU")
	public ModelAndView goEditU() {
		ModelAndView mv = this.getModelAndView();
		PageData pd = getPageData();
		try {
			String TYPE = pd.getString("TYPE");
			String currentPage = pd.getString("currentPage");
			pd = userService.findById(pd); // 根据ID读取
			pd.put("currentPage", currentPage);
			pd.put("TYPE", TYPE);
			mv.addObject("msg", "editU");
			mv.addObject("pd", pd);
			mv.addObject("isAdmin", "admin".equals(getUserInfo().getUSERNAME()) ? true : false);
			mv.setViewName("system/user/user_edit");
		} catch (Exception e) {
			logger.error(ErrorUtils.getErrorMessage(e, "去修改用户页面异常!"));
		}
		return mv;
	}

	/**
	 * 修改用户
	 */
	@RequestMapping(value = "/editU", method = RequestMethod.POST)
	@ResponseBody
	public Object editU() throws Exception {
		Map<String, String> map = new HashMap<String, String>();
		PageData pd = getPageData();
		String msg = "";
		try {
			if (pd.getString("PASSWORD") != null && !"".equals(pd.getString("PASSWORD"))) {
				pd.put("PASSWORD", new SimpleHash("SHA-1", pd.getString("USERNAME"), pd.getString("PASSWORD")).toString());
			}
			userService.editU(pd); // 执行修改
			msg = "success";
		} catch (Exception e) {
			msg = "error";
			logger.error(ErrorUtils.getErrorMessage(e, "修改用户异常"));
		}
		map.put("result", msg);
		return AppUtil.returnObject(new PageData(), map);
	}

	/**
	 * 删除用户
	 */
	@RequestMapping(value = "/deleteU")
	@ResponseBody
	public Object delete() {
		Map<String, String> map = new HashMap<String, String>();
		PageData pd = getPageData();
		String resultInfo = "";
		try {
			userService.deleteU(pd);
			resultInfo = "success";
		} catch (Exception e) {
			resultInfo = "error";
			logger.error(ErrorUtils.getErrorMessage(e, "删除用户异常!"));
		}
		map.put("result", resultInfo);
		return AppUtil.returnObject(new PageData(), map);
	}

	/**
	 * 判断用户名是否存在
	 * 
	 * @return
	 */
	@RequestMapping(value = "/checkUserName")
	@ResponseBody
	public Object checkUserName() {
		Map<String, String> map = new HashMap<String, String>();
		String msg = "";
		PageData pd = getPageData();
		try {
			if (userService.findByUsername(pd) == null) {
				msg = "no";
			} else {
				msg = "yes";
			}
		} catch (Exception e) {
			msg = "error";
			logger.error(ErrorUtils.getErrorMessage(e, "判断用户名是否存在异常!"));
		}
		map.put("result", msg);
		return AppUtil.returnObject(new PageData(), map);
	}

	/**
	 * 查询内设机构或者角色
	 */
	@RequestMapping(value = "/listSectionOrRole")
	public ModelAndView listSectionOrRole() {
		ModelAndView mv = this.getModelAndView();
		PageData pd = getPageData();
		JSONArray arr = null;
		String json = "";
		try {
			String TYPE = pd.getString("TYPE");
			if ("1".equals(TYPE)) {
				// 内设机构
				User userInfo = getUserInfo();
				arr = JSONArray.fromObject(sectionService.listAllSection(userInfo.getDEP_ID()));
				json = arr.toString();
				json = json.replaceAll("SECTION_ID", "id").replaceAll("NAME", "title");
			} else {
				pd.put("ROLE_ID", "1");
				// 列出所有系统角色
				arr = JSONArray.fromObject(roleService.listAllRolesByPId(pd));
				json = arr.toString();
				json = json.replaceAll("ROLE_ID", "id").replaceAll("ROLE_NAME", "title");
			}
			mv.addObject("zTreeNodes", json);
			mv.addObject("pd", pd);
			mv.setViewName("system/user/user_ztree");
		} catch (Exception e) {
			logger.error(ErrorUtils.getErrorMessage(e, "显示列表ztree异常"));
		}
		return mv;
	}

	/**
	 * 查询内设机构或者角色
	 */
	@RequestMapping(value = "/listSectionOrRoles")
	@ResponseBody
	public Object listSectionOrRoles() {
		Map<String, String> map = new HashMap<String, String>();
		PageData pd = getPageData();
		JSONArray arr = null;
		String json = "";
		try {
			User userInfo = getUserInfo();
			String TYPE = pd.getString("TYPE");
			// String optType = pd.getString("optType");
			if ("1".equals(TYPE)) {
				// 内设机构
				pd.put("type", "1");// 默认不查询外部单位
				if ("admin".equals(userInfo.getUSER_ID())) {
					// 查询所有内设机构
					pd.put("depId", "");
					arr = JSONArray.fromObject(sectionService.listSectionByDep(pd));
				} else {
					// 根据机构查询内设机构
					String areaCode = userInfo.getAreaCode();
					String userLevel = userInfo.getUserLevel();
					// 如果是区县及以上人员，只能增加自己所在层级内部人员信息
					// if (!"3".equals(userLevel) && !"4".equals(userLevel)) {
					//
					// } else
					if ("3".equals(userInfo.getUserLevel())) {
						areaCode = areaCode.substring(0, areaCode.length() - 3);
					} else {
						areaCode = userInfo.getAreaCode().length() == 12 ? (AreaCodeUtils.returnXzqh(userInfo.getAreaCode())) : userInfo.getAreaCode();
					}
					pd.put("areaCode", areaCode);
					List<Section> departMentList = this.sectionService.findByAreaCodeName(pd);
					pd.put("depId", userInfo.getDEP_ID());
					arr = JSONArray.fromObject(departMentList);
				}
				json = arr.toString();
				json = json.replaceAll("SECTION_ID", "id").replaceAll("NAME", "title");
			} else {
				List<String> liststr = new ArrayList<String>();
				// 根据用户层级查询所属角色
				pd.put("ROLE_ID", "1");
				// 系统管理员除外
				// if (!"admin".equals(userInfo.getUSERNAME()) &&
				// !"2".equals(userInfo.getUserLevel()) &&
				// !"1".equals(userInfo.getUserLevel())) {
				// liststr.add(userInfo.getUserLevel());
				// }
				if ("admin".equals(userInfo.getUSERNAME()) || "0".equals(userInfo.getUserLevel())) {
					liststr.add("0");
					liststr.add("1");
					liststr.add("2");
					liststr.add("3");
					liststr.add("4");
				}
				// 区县级人员可以查看乡镇、街道、村、社区下面所有角色
				if ("1".equals(userInfo.getUserLevel())) {
					liststr.add("1");
					liststr.add("2");
					// liststr.add("3");
					// liststr.add("4");
				} else if ("2".equals(userInfo.getUserLevel())) {
					// liststr.add("2");
					liststr.add("3");
					liststr.add("4");
				} else if ("3".equals(userInfo.getUserLevel())) {
					liststr.add("3");
					liststr.add("4");
				} else {
					liststr.add(userInfo.getUserLevel());
				}
				pd.put("list", liststr);
				// 列出所有系统角色
				List<Role> listAllRolesByPId = roleService.listAllRolesByPIdLevel(pd);
				String str = "";
				for (Role role : listAllRolesByPId) {
					if ("0".equals(role.getRoleLevel())) {
						str = "省";
					} else if ("1".equals(role.getRoleLevel())) {
						str = "市、洲";
					} else if ("2".equals(role.getRoleLevel())) {
						str = "区、县";
					} else if ("3".equals(role.getRoleLevel())) {
						str = "乡镇、街道办";
					} else if ("4".equals(role.getRoleLevel())) {
						str = "村、社区";
					}
					role.setROLE_NAME(role.getROLE_NAME() + "（" + str + "）");
				}
				arr = JSONArray.fromObject(listAllRolesByPId);

				json = arr.toString();
				json = json.replaceAll("ROLE_ID", "id").replaceAll("ROLE_NAME", "title");
			}
			map.put("data", json);
		} catch (Exception e) {
			logger.error(ErrorUtils.getErrorMessage(e, "显示列表ztree异常"));
		}
		return map;
	}

	/**
	 * 去修改用户密码页面
	 */
	@RequestMapping(value = "/goEditPassWord")
	public ModelAndView goEditPassWord() {
		ModelAndView mv = this.getModelAndView();
		PageData pd = getPageData();
		try {
			pd = userService.findById(pd);
			mv.addObject("msg", "editPassWord");
			mv.addObject("pd", pd);
			mv.setViewName("system/user/user_password");
		} catch (Exception e) {
			logger.error(ErrorUtils.getErrorMessage(e, "去修改用户密码页面异常!"));
		}
		return mv;
	}

	/**
	 * 修改用户密码
	 */
	@RequestMapping(value = "/editPassWord", method = RequestMethod.POST)
	@ResponseBody
	public Object editPassWord() throws Exception {
		Map<String, String> map = new HashMap<String, String>();
		PageData pd = getPageData();
		String msg = "";
		try {
			String NEW_PASSWORD = pd.getString("NEW_PASSWORD").trim();
			String USERNAME = pd.getString("USERNAME").trim();
			// 密码加密
			String PASSWORD = new SimpleHash("SHA-1", USERNAME, pd.getString("PASSWORD").trim()).toString();
			pd.put("USERNAME", USERNAME);
			pd.put("PASSWORD", PASSWORD);
			// 根据用户名和密码去读取用户信息
			pd = userService.getUserByNameAndPwd(pd);
			if (pd != null) {
				// 新密码加密
				String NEW_PWD = new SimpleHash("SHA-1", USERNAME, NEW_PASSWORD).toString();
				pd.put("NEW_PWD", NEW_PWD);
				// 执行修改
				userService.editPassWord(pd);
				msg = "success";
			} else {
				msg = "fail";
			}
		} catch (Exception e) {
			msg = "error";
			logger.error(ErrorUtils.getErrorMessage(e, "修改用户密码异常"));
		}
		map.put("result", msg);
		return AppUtil.returnObject(new PageData(), map);
	}

	/**
	 * 修改用户状态
	 */
	@RequestMapping(value = "/updateStatus")
	@ResponseBody
	public Object updateStatus() {
		Map<String, String> map = new HashMap<String, String>();
		PageData pd = getPageData();
		String resultInfo = "";
		try {
			userService.updateStatus(pd);
			resultInfo = "success";
		} catch (Exception e) {
			resultInfo = "error";
			logger.error(ErrorUtils.getErrorMessage(e, "修改用户状态异常!"));
		}
		map.put("result", resultInfo);
		return AppUtil.returnObject(new PageData(), map);
	}

	/**
	 * 离退休人员列表
	 */
	@RequestMapping(value = "/listUserRetired")
	public ModelAndView listUserRetired(Page page) {
		ModelAndView mv = this.getModelAndView();
		PageData pd = getPageData();
		String keywords = pd.getString("keywords"); // 关键词检索条件
		if (null != keywords && !"".equals(keywords)) {
			pd.put("keywords", keywords.trim());
		}
		String xzqh_code = pd.getString("xzqh");
		if ("".equals(xzqh_code) || null == xzqh_code) {
			xzqh_code = pd.getString("xzqh_code");
		}
		User userInfo = getUserInfo();
		try {
			if (StringUtils.isEmpty(xzqh_code) && null != userInfo) {
				xzqh_code = userInfo.getAreaCode();
			}
			// 选择机构list
			String parentId = userInfo.getpId();
			String areaCode = xzqh_code;
			if (StringUtils.isEmpty(areaCode)) {
				areaCode = userInfo.getAreaCode();
			} else {
				// 还原areaCode
				if (areaCode.length() != 12) {
					while (true) {
						areaCode = areaCode + "0";
						if (areaCode.length() == 12) {
							break;
						}
					}
				}
				// 查询父级id
				List<PageData> listDep = this.departmentService.findByAreaCode(areaCode);
				if (null != listDep && listDep.size() > 0) {
					parentId = listDep.get(0).getString("DEPARTMENT_ID");
				}
			}
			// 查询机构
			JSONArray arr = JSONArray.fromObject(departmentService.listByPid(parentId, "", areaCode));
			String json = arr.toString();
			json = json.replaceAll("DEPARTMENT_ID", "id").replaceAll("PARENT_ID", "pId").replaceAll("NAME", "title").replaceAll("subDepartment", "children").replaceAll("hasDepartment", "hasNext");
			pd.put("json", json);

			// 获取内设机构
			String selDepId = pd.getString("selDepId");
			if (!StringUtils.isEmpty(selDepId)) {
				// 查询内设机构
				pd.put("depId", selDepId);
				List<Section> list = sectionService.listSectionByDep(pd);
				pd.put("section", list);
			}
			pd.put("xzqh_code", xzqh_code.length() == 12 ? (AreaCodeUtils.returnXzqh(xzqh_code)) : xzqh_code);
			pd.put("type", "1");
			String status = pd.getString("status");
			if ("".equals(status) || null == status) {
				status = "1";
			}
			pd.put("status", status);
			page.setPd(pd);
			List<PageData> userList = userService.listUsers(page); // 列出用户列表
			mv.addObject("userList", userList);
			mv.addObject("pd", pd);
			mv.setViewName("system/user/userResign_list");
		} catch (Exception e) {
			logger.error(ErrorUtils.getErrorMessage(e, "用户列表异常"));
		}
		return mv;
	}

	/**
	 * 修改用户角色
	 */
	@RequestMapping(value = "/updateUserRoles")
	@ResponseBody
	public Object updateUserRoles() {
		Map<String, String> map = new HashMap<String, String>();
		String resultInfo = "";
		try {
			userService.updateUserRoles();
			resultInfo = "success";
		} catch (Exception e) {
			resultInfo = "error";
			logger.error(ErrorUtils.getErrorMessage(e, "修改用户角色异常!"));
		}
		map.put("result", resultInfo);
		return AppUtil.returnObject(new PageData(), map);
	}

}
