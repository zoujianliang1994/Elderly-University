package com.zhimu.controller.manager.edu.schedule;


import com.zhimu.commons.utils.AppUtil;
import com.zhimu.commons.utils.PageData;
import com.zhimu.controller.manager.base.BaseController;
import com.zhimu.dao.entity.system.Page;
import com.zhimu.service.manager.edu.classroom.ClassroomManager;
import com.zhimu.service.manager.edu.school.SchoolService;
import com.zhimu.service.manager.edu.studentFiles.ScheduleManager;
import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import javax.annotation.Resource;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
@RequestMapping(value = "/schedule")
public class ScheduleController extends BaseController {


  @Resource(name = "scheduleService")
  ScheduleManager scheduleService;

  /**
   * 进入列表
   * @param page
   * @return
   * @throws Exception
   */
  @RequestMapping(value = "/list")
  public ModelAndView list(Page page) throws Exception {
    ModelAndView mv = this.getModelAndView();
    PageData pd = new PageData();
    try {
      pd = this.getPageData();
      //查询条件
      if(StringUtils.isEmpty(getUserInfo().getSchoolId())){
        return mv;
      }
      pd.put("userSchoolIds",getUserInfo().getSchoolId().split(","));

      page.setPd(pd);
      List<PageData> schedule_List = scheduleService.schedulelistPage(page); // 列出所有的角色

      mv.addObject("pd", pd);
      mv.addObject("page", page);
      mv.addObject("schedule_List", schedule_List);

      mv.setViewName("edu/schedule/schedule_list");
    } catch (Exception e) {
      e.printStackTrace();
      logger.error(e.toString(), e);
    }

    return mv;
  }

  @RequestMapping(value = "/details" )
  public ModelAndView details() throws Exception {
    ModelAndView mv = this.getModelAndView();
    PageData pd = new PageData();
    try {
      pd = this.getPageData();

      mv.addObject("schoolList", getSchoolList());
      mv.addObject("msg", "add");
      pd.put("type","0");
      mv.setViewName("edu/schedule/schedule_details");
      mv.addObject("pd", pd);
    } catch (Exception e) {
      logger.error(e.toString(), e);
    }
    return mv;
  }



  /**
   * 去新增页面
   *
   * @param
   * @return
   */
  @RequestMapping(value = "/toAdd" )
  public ModelAndView toAdd() throws Exception {
    ModelAndView mv = this.getModelAndView();
    PageData pd = new PageData();
    try {
      pd = this.getPageData();

      //查询学期
      String[] schoolId=getUserInfo().getSchoolId().split(",");

      List<PageData> list = scheduleService.getAllSemesterBySchool(schoolId);

      mv.addObject("schoolList", getSchoolList());
      mv.addObject("semesterList", list);
      mv.addObject("msg", "add");
      pd.put("type","0");
      mv.setViewName("edu/schedule/schedule_edit");
      mv.addObject("pd", pd);
    } catch (Exception e) {
      e.printStackTrace();
      logger.error(e.toString(), e);
    }
    return mv;
  }

  /**
   * 保存新增
   *
   * @return
   * @throws Exception
   */
  @RequestMapping(value = "/add",method = RequestMethod.POST)
  @ResponseBody
  public Object add() throws Exception {
    ModelAndView mv = this.getModelAndView();
    PageData pd = new PageData();
    String msgs = "";
    try {
      pd = this.getPageData();
      pd.put("id",get32UUID());
      //检查是否重复排课
      List<PageData> list = scheduleService.getScheduleBySemesterId(pd.getString("semester_id"));
      if(list.size()<=0){
        msgs = "success";
        scheduleService.add(pd);
      }else{
        msgs = "false";
      }
    } catch (Exception e) {
      logger.error(e.toString(), e);
      msgs = "error";
    }
    Map<String, String> map = new HashMap<String, String>();
    map.put("msg", msgs);
    return AppUtil.returnObject(new PageData(), map);
  }

  /**
   * 请求编辑
   *
   * @return
   * @throws Exception
   */
  @RequestMapping(value = "/toEdit")
  public ModelAndView toEdit() throws Exception {
    ModelAndView mv = this.getModelAndView();
    PageData pd = new PageData();
    try {
      pd = this.getPageData();
      String currentPage = pd.getString("currentPage");
      String keywords = pd.getString("keywords");

      pd = scheduleService.findObjectById(pd);

      pd.put("currentPage", currentPage);
      pd.put("keywords", keywords);
      pd.put("type","0");
      mv.addObject("schoolList", getSchoolList());
      mv.addObject("msg", "edit");
      mv.addObject("pd", pd);
      mv.setViewName("edu/classroom/classroom_edit");
    } catch (Exception e) {
      logger.error(e.toString(), e);
    }
    return mv;
  }

  /**
   * 保存修改
   *
   * @return
   * @throws Exception
   */
  @RequestMapping(value = "/edit" ,method = RequestMethod.POST)
  @ResponseBody
  public Object edit() throws Exception {
    ModelAndView mv = this.getModelAndView();
    PageData pd = new PageData();
    String msg = "";
    try {
      pd = this.getPageData();
      msg = "success";
      scheduleService.edit(pd);
    } catch (Exception e) {
      logger.error(e.toString(), e);
      msg = "error";
    }
    Map<String, String> map = new HashMap<String, String>();
    map.put("msg", msg);
    return AppUtil.returnObject(new PageData(), map);
  }

  /**
   * 删除
   *
   * @return
   * @throws Exception
   */
  @RequestMapping(value = "/delete")
  @ResponseBody
  public Object deleteRole(@RequestParam String id) throws Exception {
    Map<String, String> map = new HashMap<String, String>();
    PageData pd = new PageData();
    String errInfo = "";
    try {
      scheduleService.deleteById(id); // 执行删除
      errInfo = "success";
    } catch (Exception e) {
      logger.error(e.toString(), e);
    }
    map.put("result", errInfo);
    return AppUtil.returnObject(new PageData(), map);
  }


  /**
   * 请求查看
   *
   * @return
   * @throws Exception
   */
  @RequestMapping(value = "/toSelect")
  public ModelAndView toSelect() throws Exception {
    ModelAndView mv = this.getModelAndView();
    PageData pd = new PageData();
    try {
      pd = this.getPageData();
      pd = scheduleService.findObjectById(pd);
      pd.put("type","1");
      mv.addObject("msg", "toSelect");
      mv.addObject("pd", pd);

      mv.addObject("schoolList", getSchoolList());
      mv.setViewName("edu/classroom/classroom_edit");
    } catch (Exception e) {
      logger.error(e.toString(), e);
    }
    return mv;
  }

  /**
   * 请求查看
   *
   * @return
   * @throws Exception
   */
  @RequestMapping(value = "/toUse")
  public ModelAndView toUse() throws Exception {
    ModelAndView mv = this.getModelAndView();
    PageData pd = new PageData();
    try {
      pd = this.getPageData();
      pd = scheduleService.findObjectById(pd);
      pd.put("type","1");
      mv.addObject("msg", "toSelect");
      mv.addObject("pd", pd);

      mv.addObject("schoolList", getSchoolList());
      mv.setViewName("edu/classroom/classroom_use");
    } catch (Exception e) {
      logger.error(e.toString(), e);
    }
    return mv;
  }


}
