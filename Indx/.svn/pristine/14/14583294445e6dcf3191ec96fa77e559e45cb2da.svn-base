/**
 * 学员报名选课
 * @author wangyong
 */
package com.zhimu.service.manager.edu.student;

import java.util.List;

import javax.annotation.Resource;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Service;

import com.zhimu.commons.utils.DateUtil;
import com.zhimu.commons.utils.PageData;
import com.zhimu.dao.DaoSupport;
import com.zhimu.dao.entity.system.Page;
import com.zhimu.service.manager.edu.grades.GradesManager;
import com.zhimu.service.manager.edu.semester.SemesterService;
import com.zhimu.service.manager.system.user.impl.UserService;

@Service("enrollService")
public class EnrollService {

	@Resource(name = "daoSupport")
	private DaoSupport dao;
	@Resource(name = "userService")
	private UserService userService;
	@Resource(name = "studentService")
	private StudentService studentService;
	@Resource(name = "gradesService")
	private GradesManager gradesService;
	@Resource(name = "semesterService")
	private SemesterService semesterService;

	/**
	 * 列表
	 * 
	 * @param page
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	public List<PageData> list(Page page) throws Exception {
		return (List<PageData>) dao.findForList("StudentEnrollMapper.datalistPage", page);
	}

	/**
	 * 新增
	 * 
	 * @param pd
	 * @throws Exception
	 */
	@SuppressWarnings("null")
	public void save(PageData pd) throws Exception {
		// 支付开始
		// 支付结束
		// 保存选课信息
		String selData = pd.getString("selData");
		if (StringUtils.isNotEmpty(selData)) {
			JSONArray json = JSONArray.fromObject(selData);
			if (json.size() > 0) {
				String[] sIds = null;
				String[] sNames = null;
				String[] cIds = null;
				String[] cNames = null;
				String[] lIds = null;
				String[] lNames = null;
				for (int i = 0; i < json.size(); i++) {
					JSONObject job = json.getJSONObject(i);
					pd.put("school_name", job.getString("a_name"));
					pd.put("school_id", job.getString("a_id"));
					pd.put("child_school_id", job.getString("school_id"));
					pd.put("child_school_name", job.getString("school_name"));
					pd.put("g_name", job.getString("g_name"));
					pd.put("g_id", job.getString("g_id"));
					pd.put("teacher_name", job.getString("teacher_name"));
					pd.put("teacher_id", job.getString("teacher_id"));
					pd.put("classroom_name", job.getString("classroom_name"));
					pd.put("course_time", job.getString("course_time"));
					pd.put("money", job.getString("money"));
					pd.put("money_status", "1");
					pd.put("student_id", "");
					dao.save("StudentEnrollMapper.save", pd);
					sIds[i] = job.getString("school_id");
					sNames[i] = job.getString("school_name");
					cIds[i] = job.getString("g_id");
					cNames[i] = job.getString("g_name");
					PageData lessonPd = gradesService.findObjectById(pd);
					lIds[i] = lessonPd.getString("id");
					lNames[i] = lessonPd.getString("name");
				}
				// 写入班级信息到学员表
				PageData stuPd = studentService.findByUser("user_id");
				stuPd.put("s_id", StringUtils.join(sIds, ","));
				stuPd.put("s_name", StringUtils.join(sNames, ","));
				stuPd.put("c_id", StringUtils.join(cIds, ","));
				stuPd.put("c_name", StringUtils.join(cNames, ","));
				stuPd.put("l_id", StringUtils.join(lIds, ","));
				stuPd.put("l_name", StringUtils.join(lNames, ","));
				// 根据当前报名日期和学校ID查询所在是哪个学期
				pd.put("regDate", DateUtil.getDay());
				pd.put("s_id", sIds);
				List<PageData> semesterPd = semesterService.findByDateAndSid(pd);
				if (null == semesterPd || semesterPd.size() <= 0) {
					throw new RuntimeException("当前时间段暂未查询到学期信息");
				}
				stuPd.put("semester_id", semesterPd.get(0).getString("ids"));
				this.studentService.editStudentEnroll(stuPd);
			}
		}

	}

	/**
	 * 删除
	 * 
	 * @param pd
	 * @throws Exception
	 */
	public void delete(PageData pd) throws Exception {
		dao.delete("StudentEnrollMapper.delete", pd);
	}

	/**
	 * 修改
	 * 
	 * @param pd
	 * @throws Exception
	 */
	public void edit(PageData pd) throws Exception {
		dao.update("StudentEnrollMapper.edit", pd);

	}

	/**
	 * 通过id获取数据
	 * 
	 * @param pd
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	public List<PageData> findByUserId(PageData pd) throws Exception {
		return (List<PageData>) dao.findForList("StudentEnrollMapper.findByUserId", pd);
	}

}