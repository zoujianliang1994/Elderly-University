package com.zhimu.controller.manager.edu.student;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import net.sf.json.JSONArray;

import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.zhimu.commons.utils.AppUtil;
import com.zhimu.commons.utils.DateUtil;
import com.zhimu.commons.utils.ErrorUtils;
import com.zhimu.commons.utils.PageData;
import com.zhimu.controller.manager.base.BaseController;
import com.zhimu.dao.entity.system.Page;
import com.zhimu.service.manager.edu.school.SchoolService;
import com.zhimu.service.manager.system.user.impl.UserService;

/**
 * 说明：学员
 */
@Controller
@RequestMapping(value = "/student")
public class StudentController extends BaseController {

	@Resource(name = "schoolService")
	private SchoolService schoolService;
	@Resource(name = "userService")
	private UserService userService;

	/**
	 * 学员列表
	 * 
	 * @param page
	 * @throws Exception
	 */
	@RequestMapping(value = "/list")
	public ModelAndView list(Page page) throws Exception {
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		String keywords = pd.getString("keywords"); // 检索条件
		if (null != keywords && !"".equals(keywords)) {
			pd.put("keywords", keywords.trim());
		}
		page.setPd(pd);
		List<PageData> varList = schoolService.list(page); // 列表
		mv.setViewName("edu/school/school_list");
		mv.addObject("varList", varList);
		return mv;
	}

	/**
	 * 去新增页面
	 * 
	 * @param
	 * @throws Exception
	 */
	@RequestMapping(value = "/goAdd")
	public ModelAndView goAdd() throws Exception {
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		mv.addObject("currentPage", pd.get("currentPage"));
		mv.addObject("msg", "save");
		mv.setViewName("edu/school/school_edit");
		return mv;
	}

	/**
	 * 保存学校
	 * 
	 * @param
	 * @throws Exception
	 */
	@RequestMapping(value = "/save")
	@ResponseBody
	public Object save() throws Exception {
		Map<String, String> map = new HashMap<String, String>();
		String msg = "";
		PageData pd = new PageData();
		pd = this.getPageData();
		pd.put("id", this.get32UUID()); // 主键
		pd.put("create_date", DateUtil.getDay());
		pd.put("create_id", getUserInfo().getUSER_ID());
		schoolService.save(pd);
		msg = "success";
		map.put("msg", msg);
		return AppUtil.returnObject(new PageData(), map);
	}

	/**
	 * 去修改页面
	 * 
	 * @param
	 * @throws Exception
	 */
	@RequestMapping(value = "/goEdit")
	public ModelAndView goEdit() throws Exception {
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		String type = pd.getString("type");
		String currentPage = pd.getString("currentPage");
		pd = schoolService.findById(pd); // 根据ID读取
		pd.put("type", type);
		mv.addObject("pd", pd); // 放入视图容器
		mv.addObject("currentPage", currentPage);
		mv.setViewName("edu/school/school_edit");
		mv.addObject("msg", "edit");
		return mv;
	}

	/**
	 * 修改学校
	 * 
	 * @param
	 * @throws Exception
	 */
	@RequestMapping(value = "/edit")
	@ResponseBody
	public Object edit() throws Exception {
		Map<String, String> map = new HashMap<String, String>();
		String msg = "";
		PageData pd = new PageData();
		pd = this.getPageData();
		pd.put("createName", getUserInfo().getNAME());
		pd.put("createId", getUserInfo().getUSER_ID());
		schoolService.edit(pd);
		msg = "success";
		map.put("msg", msg);
		return AppUtil.returnObject(new PageData(), map);
	}

	/**
	 * 删除学校
	 */
	@RequestMapping(value = "/delete")
	@ResponseBody
	public Object delete() {
		Map<String, String> map = new HashMap<String, String>();
		PageData pd = getPageData();
		String resultInfo = "";
		try {
			// 判断当前学校下面是否有人员信息
			pd.put("SCHOOL_ID", pd.getString("id"));
			List<PageData> users = userService.listAllUserBySid(pd);
			if (null != users && users.size() > 0) {
				resultInfo = "error";
			} else {
				schoolService.delete(pd);
				resultInfo = "success";
			}
		} catch (Exception e) {
			resultInfo = "error";
			logger.error(ErrorUtils.getErrorMessage(e, "删除学校异常!"));
		}
		map.put("result", resultInfo);
		return AppUtil.returnObject(new PageData(), map);
	}

	/**
	 * 获取当前登录用户创建的学校json数据--lwc
	 * 
	 * @return
	 */
	@RequestMapping(value = "/listSchoolsById")
	@ResponseBody
	public Object listSchoolsById() {
		Map<String, String> map = new HashMap<String, String>();
		PageData pd = getPageData();
		JSONArray arr = null;
		String json = "";
		try {
			// 获取到当前登录用户创建的大学供选择
			String userId = this.getUserInfo().getUSER_ID();
			pd.put("createId", userId);
			List<PageData> schools = schoolService.findByCid(pd); // 获取到所有当前用户创建的学校
			arr = JSONArray.fromObject(schools);
			json = arr.toString();
			json = json.replaceAll("name", "title");
			map.put("data", json);
		} catch (Exception e) {
			logger.error(ErrorUtils.getErrorMessage(e, "获取学校异常!"));
		}
		return map;
	}

	@InitBinder
	public void initBinder(WebDataBinder binder) {
		DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
		binder.registerCustomEditor(Date.class, new CustomDateEditor(format, true));
	}
}
