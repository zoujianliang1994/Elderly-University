package com.zhimu.controller.manager.base;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.FileUtils;
import org.json.JSONObject;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.zhimu.commons.utils.ErrorUtils;
import com.zhimu.dao.entity.system.Attachment;
import com.zhimu.dao.enums.AttachmentFileIdentity;
import com.zhimu.dao.utils.Jurisdiction;
import com.zhimu.service.manager.system.attachment.AttachmentManager;
/**
 *   附件公用控制
 * @author Weiyunchao
 *
 * 2017年8月8日上午11:14:21
 */
@Controller
@RequestMapping(value = "/attachment")
public class AttachmentController {
	
	protected org.slf4j.Logger logger = LoggerFactory.getLogger(this.getClass());
	private static String ATTACHMENT_FILE_PATH = "D:\\614system\\uploadFile";
	@Resource(name = "attachmentService")
	private AttachmentManager attachmentService;

	
	@InitBinder
	public void initBinderAttachment(WebDataBinder binder){
		binder.setFieldDefaultPrefix("attachment.");
	}
	/**
	 *  
	 * @param systemFile
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException
	 */
	@RequestMapping(value = "/save", method=RequestMethod.POST, produces="text/html;charset=UTF-8")
	public String save(@RequestParam MultipartFile[] systemFile, HttpServletRequest request, HttpServletResponse response) throws IOException
	{
		try {
			//可以在上传文件的同时接收其它参数
	        //如果用的是Tomcat服务器，则文件会上传到\\%TOMCAT_HOME%\\webapps\\YourWebProject\\upload\\文件夹中
	        //这里实现文件上传操作用的是commons.io.FileUtils类,它会自动判断/upload是否存在,不存在会自动创建
	        //String realPath = request.getSession().getServletContext().getRealPath("/upload");
	        //设置响应给前台内容的数据格式
	        response.setContentType("text/plain; charset=UTF-8");
	        //设置响应给前台内容的PrintWriter对象
	        PrintWriter out = response.getWriter();
	        //上传文件的原名(即上传前的文件名字)	
	        String originalFilename = null;
	        JSONObject jsonObj = new JSONObject();//创建json格式的数据 
	        //如果只是上传一个文件,则只需要MultipartFile类型接收文件即可,而且无需显式指定@RequestParam注解
	        //如果想上传多个文件,那么这里就要用MultipartFile[]类型来接收文件,并且要指定@RequestParam注解
	        //上传多个文件时,前台表单中的所有<input type="file"/>的name都应该是importFile,否则参数里的importFile无法获取到所有上传的文件
	        String attachmentIds ="";//多附件ID
	        String attachmentNames ="";//多附件名称
	        for(MultipartFile myfile : systemFile){
	            if(myfile.isEmpty()){
	            	jsonObj.put("status", "请选择文件后上传!");
	                out.print(jsonObj.toString());
	                out.flush();
	            }else{
	                originalFilename = myfile.getOriginalFilename();
	                //判断文件在该目录是否已存在
	                File file = new File(ATTACHMENT_FILE_PATH+"\\"+originalFilename);
	                SimpleDateFormat simple = new SimpleDateFormat("yyyy:MM:dd:HH:mm:ss");
	                String datetime = simple.format(new Date()).replaceAll(":", "");
	                if(file.exists())
	                {
	                	originalFilename = originalFilename.split("\\.")[0] +"("+ datetime +")." + originalFilename.split("\\.")[1];
	                }
	                System.out.println("文件原名: " + originalFilename);
	                System.out.println("文件名称: " + myfile.getName());
	                System.out.println("文件长度: " + myfile.getSize());
	                System.out.println("文件类型: " + myfile.getContentType());
	                System.out.println("========================================");
	                try {
	                    //这里不必处理IO流关闭的问题,因为FileUtils.copyInputStreamToFile()方法内部会自动把用到的IO流关掉
	                    FileUtils.copyInputStreamToFile(myfile.getInputStream(), new File(ATTACHMENT_FILE_PATH, originalFilename));
	                    String filePath = ATTACHMENT_FILE_PATH+"\\"+originalFilename;
	                    String[] fileType = originalFilename.split("\\.");
	                    Attachment attachment = new Attachment();
	                    attachment.setPath(filePath);
	                    attachment.setFileType(fileType[1]);
	                    attachment.setName(originalFilename);
	                    attachment.setFileIdentity(AttachmentFileIdentity.MEETING.toString());
	                    attachment.setCreateBy(Jurisdiction.getUsername());
	                    attachment.setCreateTime(new Timestamp(System.currentTimeMillis()).toString());
	                    attachmentService.save(attachment);
	                    attachmentIds = attachmentIds + "," + attachment.getId();
	                    attachmentNames = attachmentNames + "," + attachment.getName();
	                } catch (IOException e) {
	                	jsonObj.put("status", "文件上传成功!");
	                    out.print(jsonObj.toString());
	                    out.flush();
	                    logger.error(ErrorUtils.getErrorMessage(e, "文件[" + originalFilename + "]上传失败,堆栈轨迹如下"));
	                }
	            }
	        }
	        jsonObj.put("status", "文件上传成功!");
	        jsonObj.put("attatchmentId", attachmentIds);
            jsonObj.put("attatchmentName", attachmentNames);
            out.print(jsonObj.toString());
            out.flush();
		} catch (Exception e) {
			logger.error(ErrorUtils.getErrorMessage(e, "保存附件出错"));
		}
		return null;
    }
	/**
	 * 
	 * @param attachment
	 * @return
	 * @throws Exception 
	 */
	@RequestMapping(value = "/deleteAttachment", method=RequestMethod.POST, produces="text/html;charset=UTF-8")
	@ResponseBody
	public String deleteAttachment(Attachment attachment) throws Exception
	{
	   String status ="";//删除状态
	   File file = new File(ATTACHMENT_FILE_PATH, attachment.getName());
        if (!file.exists()) {
            status = "删除文件失败:" + attachment.getName() + "不存在！";
        } else {
            if (file.isFile())
            {
            	deleteFile(attachment);
            	status = "文件删除成功";
            }
        }
        return status;
	}
	/**
     * 删除单个文件
     *
     * @param attachment
     *            要删除的文件的文件名
     * @return 单个文件删除成功返回true，否则返回false
	 * @throws Exception 
     */
    public boolean deleteFile(Attachment attachment) throws Exception {
        File file = new File(ATTACHMENT_FILE_PATH, attachment.getName());
        // 如果文件路径所对应的文件存在，并且是一个文件，则直接删除
        if (file.exists() && file.isFile()) {
            if (file.delete()) 
            {
            	attachmentService.deleteAttachment(attachment);
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

}
