package com.zhimu.service.manager.edu.notice.impl;

import com.zhimu.commons.utils.PageData;
import com.zhimu.commons.websocket.SocketCache;
import com.zhimu.dao.DaoSupport;
import com.zhimu.dao.entity.message.Message;
import com.zhimu.dao.entity.system.Page;
import com.zhimu.dao.enums.MessageStatus;
import com.zhimu.dao.enums.MessageType;
import com.zhimu.dao.utils.Jurisdiction;
import com.zhimu.service.manager.edu.notice.NoticeManager;
import com.zhimu.service.manager.message.MessageManager;
import com.zhimu.service.manager.message.impl.MessageService;
import com.zhimu.service.manager.websocket.SocketIoManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.List;

/**
 *   通知公告接口实现
 * @author liangwenchao
 *
 */
@Service("noticeService")
public class NoticeService implements NoticeManager{
	
	protected final Logger logger = LoggerFactory.getLogger(this.getClass());
	
	@Resource(name = "daoSupport")
	private DaoSupport dao;
	@Resource(name = "messageService")
	private MessageService messageService;

	@Override
	public void sendMessage(Message message) throws Exception
	{
		if(null != message)
		{
			message.setCreateBy(Jurisdiction.getUsername());
				message.setStatus(MessageStatus.NO_SEND.toString());
				dao.save("NoticeMapper.save", message);//保存发送的消息信息

			String id = message.getId();
			String url = "notice/goEdit.do?id=" + id +"&TYPE=" + 1;
			Message msg = new Message(url, message.getTitle(), message.getContent(), id,
					"admin", "admin", message.getType(), MessageStatus.NO_SEND
					.toString(), "", message.getPublishTime());
			msg.setId(id);
			messageService.sendMessage(msg); // 发送推送消息
		}
	}
	@Override
	public void sendMoreMessage(Message message) throws Exception {
		if(null != message && null != message.getUserNameList() && message.getUserNameList().size() > 0)
		{
			for (int i = 0; i < message.getUserNameList().size(); i++)
			{
				message.setUserName(message.getUserNameList().get(i));
				this.sendMessage(message);
			}
		}	
	}
	/**
	 *   更新消息状态 为已读 （已处理）
	 * @param pd
	 * @throws Exception
	 */
	public void updateStatus(PageData pd) throws Exception {
		dao.update("NoticeMapper.update", pd);
	}
	
	@Override
	public Message findById(String id) throws Exception 
	{
		return (Message) dao.findForObject("NoticeMapper.findById", id);
	}
	@SuppressWarnings("unchecked")
	@Override
	public List<PageData> findByUserId(PageData pd) throws Exception
	{
		return (List<PageData>) dao.findForList("NoticeMapper.findByUserId", pd);
	}
	@SuppressWarnings("unchecked")
	@Override
	public List<Message> listAll(Message message) throws Exception
	{
		return (List<Message>) dao.findForList("NoticeMapper.listAll", message);
	}

	/**
	 * 查询个人公告列表
	 *
	 * @param page
	 * @return
	 * @throws Exception
	 */
	@Override
	public List<PageData> listPageByUser(Page page) throws Exception {
		return (List<PageData>)dao.findForList("NoticeMapper.listPageByUser", page);
	}

	/**
	 * 根据id删除消息
	 *
	 * @param id
	 * @throws Exception
	 */
	@Override
	public void delete(String id) throws Exception {
		dao.delete("NoticeMapper.delete", id);
	}

	/**
	 * 修改消息
	 *
	 * @param message
	 * @throws Exception
	 */
	@Override
	public void edit(Message message) throws Exception {
		dao.update("NoticeMapper.updateMess", message);
	}
}
