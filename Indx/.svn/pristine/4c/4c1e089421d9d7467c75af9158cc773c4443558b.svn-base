package com.zhimu.commons.utils;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

/**
 * 说明：日期处理
 * 创建人：FH Q313596790
 * 修改时间：2015年11月24日
 */
public class DateUtil {

  private final static SimpleDateFormat sdfYear = new SimpleDateFormat("yyyy");
  private final static SimpleDateFormat sdfDay = new SimpleDateFormat("yyyy-MM-dd");
  private final static SimpleDateFormat sdfDays = new SimpleDateFormat("yyyyMMdd");
  private final static SimpleDateFormat sdfTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

  /**
   * 获取YYYY格式
   *
   * @return
   */
  public static String getYear() {
    return sdfYear.format(new Date());
  }

  /**
   * 获取YYYY-MM-DD格式
   *
   * @return
   */
  public static String getDay() {
    return sdfDay.format(new Date());
  }

  /**
   * 获取YYYYMMDD格式
   *
   * @return
   */
  public static String getDays() {
    return sdfDays.format(new Date());
  }

  /**
   * 获取YYYY-MM-DD HH:mm:ss格式
   *
   * @return
   */
  public static String getTime() {
    return sdfTime.format(new Date());
  }

  /**
   * @param s
   * @param e
   * @return boolean
   * @throws
   * @Title: compareDate
   * @Description: TODO(日期比较，如果s>=e 返回true 否则返回false)
   * @author fh
   */
  public static boolean compareDate(String s, String e) {
    if (fomatDate(s) == null || fomatDate(e) == null) {
      return false;
    }
    return fomatDate(s).getTime() >= fomatDate(e).getTime();
  }

  /**
   * 格式化日期
   *
   * @return
   */
  public static Date fomatDate(String date) {
    DateFormat fmt = new SimpleDateFormat("yyyy-MM-dd");
    try {
      return fmt.parse(date);
    } catch (ParseException e) {
      e.printStackTrace();
      return null;
    }
  }

  /**
   * 校验日期是否合法
   *
   * @return
   */
  public static boolean isValidDate(String s) {
    DateFormat fmt = new SimpleDateFormat("yyyy-MM-dd");
    try {
      fmt.parse(s);
      return true;
    } catch (Exception e) {
      // 如果throw java.text.ParseException或者NullPointerException，就说明格式不对
      return false;
    }
  }

  /**
   * @param startTime
   * @param endTime
   * @return
   */
  public static int getDiffYear(String startTime, String endTime) {
    DateFormat fmt = new SimpleDateFormat("yyyy-MM-dd");
    try {
      //long aa=0;
      int years = (int) (((fmt.parse(endTime).getTime() - fmt.parse(startTime).getTime()) / (1000 * 60 * 60 * 24)) / 365);
      return years;
    } catch (Exception e) {
      // 如果throw java.text.ParseException或者NullPointerException，就说明格式不对
      return 0;
    }
  }

  /**
   * <li>功能描述：时间相减得到天数
   *
   * @param beginDateStr
   * @param endDateStr
   * @return long
   * @author Administrator
   */
  public static long getDaySub(String beginDateStr, String endDateStr) {
    long day = 0;
    java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("yyyy-MM-dd");
    java.util.Date beginDate = null;
    java.util.Date endDate = null;

    try {
      beginDate = format.parse(beginDateStr);
      endDate = format.parse(endDateStr);
    } catch (ParseException e) {
      e.printStackTrace();
    }
    day = (endDate.getTime() - beginDate.getTime()) / (24 * 60 * 60 * 1000);
    //System.out.println("相隔的天数="+day);

    return day;
  }

  /**
   * 得到n天之后的日期
   *
   * @param days
   * @return
   */
  public static String getAfterDayDate(String days) {
    int daysInt = Integer.parseInt(days);

    Calendar canlendar = Calendar.getInstance(); // java.util包
    canlendar.add(Calendar.DATE, daysInt); // 日期减 如果不够减会将月变动
    Date date = canlendar.getTime();

    SimpleDateFormat sdfd = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    String dateStr = sdfd.format(date);

    return dateStr;
  }

  /**
   * 得到n天之后是周几
   *
   * @param days
   * @return
   */
  public static String getAfterDayWeek(String days) {
    int daysInt = Integer.parseInt(days);
    Calendar canlendar = Calendar.getInstance(); // java.util包
    canlendar.add(Calendar.DATE, daysInt); // 日期减 如果不够减会将月变动
    Date date = canlendar.getTime();
    SimpleDateFormat sdf = new SimpleDateFormat("E");
    String dateStr = sdf.format(date);
    return dateStr;
  }


  /**
   * 获取指定日期是周几--lwc
   *
   * @param date
   * @return
   */
  public static int getWeek(Date date) {
    int[] weeks = {7, 1, 2, 3, 4, 5, 6};
    Calendar cal = Calendar.getInstance();
    cal.setTime(date);
    int week_index = cal.get(Calendar.DAY_OF_WEEK) - 1;
    if (week_index < 0) {
      week_index = 0;
    }
    return weeks[week_index];
  }

  /**
   * 获取两个字符串日期相隔天数--lwc
   *
   * @param smdate
   * @param bdate
   * @return
   * @throws ParseException
   */
  public static int daysBetween(String smdate, String bdate) throws ParseException {
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    Calendar cal = Calendar.getInstance();
    cal.setTime(sdf.parse(smdate));
    long time1 = cal.getTimeInMillis();
    cal.setTime(sdf.parse(bdate));
    long time2 = cal.getTimeInMillis();
    long between_days = (time2 - time1) / (1000 * 3600 * 24);

    return Integer.parseInt(String.valueOf(between_days));
  }

  /**
   * 获取截取的时间部分
   *
   * @param date
   * @return
   */
  public static String getCutTime(String date) {
    DateFormat fmt = new SimpleDateFormat("HH:mm:ss");
    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    try {
      Date day = formatter.parse(date);
      return fmt.format(day);
    } catch (ParseException e) {
      e.printStackTrace();
      return null;
    }
  }

  /**
   * 获取两时间的前后比较,time1早于time2返回true,否则返回false
   *
   * @param time1
   * @param time2
   * @return
   * @throws ParseException
   */
  public static boolean compareTime(String time1, String time2) throws ParseException {
    //如果想比较日期则写成"yyyy-MM-dd"就可以了
    SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
    //将字符串形式的时间转化为Date类型的时间
    if (time1.length() > 8) {
      time1 = DateUtil.getCutTime(time1);
    }
    if (time2.length() > 8) {
      time2 = DateUtil.getCutTime(time2);
    }

    Date a = sdf.parse(time1);
    Date b = sdf.parse(time2);
    //Date类的一个方法，如果a早于b返回true，否则返回false
    if (a.before(b))
      return true;
    else
      return false;
  }

  /**
   * 当月第一天日期(t1=0,t2=1)
   * 当月最后一天日期(t1=1,t2=0)
   */
  public static String returnNowDate(int t1, int t2) throws Exception {
    SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
    // 获取当前日期
    Calendar cal_1 = Calendar.getInstance();
    cal_1.add(Calendar.MONTH, t1);
    cal_1.set(Calendar.DAY_OF_MONTH, t2);
    String returnNowDate = format.format(cal_1.getTime());
    return returnNowDate;
  }

  /**
   * 根据传入日期 获取当前星期几 日期格式 yyyy-mm-dd
   * 1:周一  2：周二 .....依次类推
   */
  public static int returnNowDay(String nowDate) throws Exception {
    Calendar c = Calendar.getInstance();// 获得一个日历的实例
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    c.setTime(sdf.parse(nowDate));
    int returnNowDay = c.get(Calendar.DAY_OF_WEEK) - 1;
    return returnNowDay;
  }

  /**
   * 查询两个日期之间有几个周几
   * startDay 准备查询的起始日期
   * endDay 准备查询的结束日期
   * dayOfWeek 准备查的一周中的某一天(准备查周几？)
   */
  public static int getMondayNumber(String startDay, String endDay, int dayOfWeek) throws Exception {
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    int differenceDay = 0;
    // 转换起始日期
    Date startDate = sdf.parse(startDay);
    // 转换结束日期
    Date endDate = sdf.parse(endDay);
    // 实例化起始和结束Calendar对象
    Calendar startCalendar = Calendar.getInstance();
    Calendar endCalendar = Calendar.getInstance();
    // 分别设置Calendar对象的时间
    startCalendar.setTime(startDate);
    endCalendar.setTime(endDate);

    // 定义起始日期和结束日期分别属于第几周
    int startWeek = startCalendar.get(Calendar.WEEK_OF_YEAR);
    int endWeek = endCalendar.get(Calendar.WEEK_OF_YEAR);

    // 拿到起始日期是星期几
    int startDayOfWeek = startCalendar.get(Calendar.DAY_OF_WEEK);
    if (startDayOfWeek == 1) {
      startDayOfWeek = 7;
      startWeek--;
    } else
      startDayOfWeek--;

    // 拿到结束日期是星期几
    int endDayOfWeek = endCalendar.get(Calendar.DAY_OF_WEEK);
    if (endDayOfWeek == 1) {
      endDayOfWeek = 7;
      endWeek--;
    } else
      endDayOfWeek--;

    // 计算相差的周数
    int differenceWeek = endWeek - startWeek;

    // 开始计算
    if (startDayOfWeek <= dayOfWeek) {
      if (endDayOfWeek >= dayOfWeek) {
        differenceDay = differenceWeek + 1;
      } else {
        differenceDay = differenceWeek;
      }
    } else if (startDayOfWeek > dayOfWeek) {
      if (endDayOfWeek < dayOfWeek)
        differenceDay = differenceWeek - 1;
      else
        differenceDay = differenceWeek;
    } else {
      differenceDay = differenceWeek;
    }
    return differenceDay;
  }

  /**
   * 指定日期加上对应天数,并且返回新日期
   */
  public static String addDay(String createDate, int day) throws Exception {
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-mm-dd");
    Date date = sdf.parse(createDate);
    Calendar cl = Calendar.getInstance();
    cl.setTime(date);
    cl.add(Calendar.DATE, day);
    String newDate = sdf.format(cl.getTime());
    return newDate;
  }

  /**
   * 获取年月 num默认0,表示当前月,-1表示当月的上一个月,+1表示下一个月,依次类推
   */
  public static String getYearMonth(int num) throws Exception {
    Calendar c = Calendar.getInstance();
    c.add(Calendar.MONTH, num);
    SimpleDateFormat format = new SimpleDateFormat("yyyy-MM");
    String time = format.format(c.getTime());
    return time;
  }

  /**
   * type :yyyy-mm-dd,yyyy-mm,HH:mm:ss
   */
  public static boolean compareDate(String time1, String time2, String type) throws ParseException {
    SimpleDateFormat sdf = new SimpleDateFormat(type);
    //将字符串形式的时间转化为Date类型的时间
    if (time1.length() > 8) {
      time1 = DateUtil.getCutTime(time1);
    }
    if (time2.length() > 8) {
      time2 = DateUtil.getCutTime(time2);
    }
    Date a = sdf.parse(time1);
    Date b = sdf.parse(time2);
    //Date类的一个方法，如果a早于b返回true，否则返回false
    if (a.before(b))
      return true;
    else
      return false;
  }


  public static void main(String[] args) {
    try {
      System.out.print(DateUtil.compareTime("2018-01-18 15:15:15", "08:33:53"));
    } catch (ParseException e) {
      e.printStackTrace();
    }
  }
}
