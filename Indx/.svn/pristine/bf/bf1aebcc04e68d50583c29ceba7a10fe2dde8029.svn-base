package com.zhimu.controller.manager.edu.student;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.aliyuncs.exceptions.ClientException;
import com.zhimu.commons.utils.AppUtil;
import com.zhimu.commons.utils.DateUtil;
import com.zhimu.commons.utils.ErrorUtils;
import com.zhimu.commons.utils.PageData;
import com.zhimu.commons.utils.SmsUtil;
import com.zhimu.controller.manager.base.BaseController;
import com.zhimu.dao.entity.system.Page;
import com.zhimu.service.manager.edu.grades.GradesManager;
import com.zhimu.service.manager.edu.student.EnrollService;
import com.zhimu.service.manager.edu.student.RegisterService;
import com.zhimu.service.manager.system.user.impl.UserService;

/**
 * 说明：学员网上报名
 */
@Controller
@RequestMapping(value = "/studentEnroll")
public class EnrollController extends BaseController {

	@Resource(name = "registerService")
	private RegisterService registerService;
	@Resource(name = "userService")
	private UserService userService;
	@Resource(name = "gradesService")
	private GradesManager gradesService;
	@Resource(name = "enrollService")
	private EnrollService enrollService;

	/**
	 * 去网上报名页面
	 * 
	 * @param
	 */
	@RequestMapping(value = "/goAdd")
	public ModelAndView goAdd() {
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		mv.addObject("currentPage", pd.get("currentPage"));
		mv.addObject("msg", "save");
		mv.setViewName("edu/student/stu_enroll");
		return mv;
	}

	/**
	 * 去班级筛选页面
	 * 
	 * @param
	 */
	@RequestMapping(value = "/goGrades")
	public ModelAndView goGrades(Page page) {
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		try {
			pd = this.getPageData();
			// 查询条件
			if (StringUtils.isEmpty(getUserInfo().getSchoolId())) {
				return mv;
			}
			pd.put("userSchoolIds", getUserInfo().getSchoolId().split(","));
			pd.put("sex", getUserInfo().getSEX());
			page.setPd(pd);
			List<PageData> grades_List = gradesService.gradesDetaillistPage(page); // 列出所有的班级
			// 根据当前用户查询学校以及校区、教学点信息

			mv.addObject("pd", pd);
			mv.addObject("page", page);
			mv.addObject("varList", grades_List);

			mv.setViewName("edu/student/stu_grades");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error(e.toString(), e);
		}
		return mv;
	}

	/**
	 * 保存学员选课信息
	 */

	@RequestMapping(value = "/saveEnroll")
	@ResponseBody
	public Object saveEnroll(HttpSession session) {
		Map<String, String> map = new HashMap<String, String>();
		String msg = "success";
		PageData pd = new PageData();
		pd = this.getPageData();
		pd.put("id", this.get32UUID()); // 主键
		pd.put("create_time", DateUtil.getDay());
		pd.put("user_id", getUserInfo().getUSER_ID());
		try {
			enrollService.save(pd);
		} catch (Exception e) {
			msg = "error";
			logger.error(ErrorUtils.getErrorMessage(e, "保存学员选课信息异常!"));
			e.printStackTrace();
		}
		map.put("msg", msg);
		return AppUtil.returnObject(new PageData(), map);
	}

	/**
	 * 学员已选课列表
	 * 
	 * @param page
	 */
	@RequestMapping(value = "/listGrades")
	public ModelAndView listGrades(PageData pd) {
		ModelAndView mv = this.getModelAndView();
		pd = this.getPageData();
		List<PageData> varList = new ArrayList<PageData>();
		try {
			pd.put("user_id", getUserInfo().getUSER_ID());
			varList = enrollService.findByUserId(pd);
		} catch (Exception e) {
			logger.error(ErrorUtils.getErrorMessage(e, "学员已选课列表异常!"));
			e.printStackTrace();
		} // 列表
		mv.setViewName("edu/student/student_list");
		mv.addObject("varList", varList);
		return mv;
	}

	/**
	 * 学员报名列表
	 * 
	 * @param page
	 */
	@RequestMapping(value = "/list")
	public ModelAndView list(Page page) {
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		String keywords = pd.getString("keywords"); // 检索条件
		if (null != keywords && !"".equals(keywords)) {
			pd.put("keywords", keywords.trim());
		}
		page.setPd(pd);
		List<PageData> varList = new ArrayList<PageData>();
		try {
			varList = enrollService.list(page);
		} catch (Exception e) {
			logger.error(ErrorUtils.getErrorMessage(e, "学员报名列表信息异常!"));
			e.printStackTrace();
		} // 列表
		mv.setViewName("edu/student/student_list");
		mv.addObject("varList", varList);
		return mv;
	}

	/**
	 * 去报名页面
	 * 
	 * @param
	 */
	@RequestMapping(value = "/goRegister")
	public ModelAndView goRegister() {
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		mv.addObject("msg", "save");
		mv.addObject("pd", pd);
		mv.setViewName("edu/student/student_register_edit");
		return mv;
	}

	/**
	 * 保存学员注册信息
	 * 
	 * @param
	 */
	@RequestMapping(value = "/save")
	@ResponseBody
	public Object save(HttpSession session) {
		Map<String, String> map = new HashMap<String, String>();
		String msg = "success";
		PageData pd = new PageData();
		pd = this.getPageData();
		pd.put("id", this.get32UUID()); // 主键
		pd.put("create_date", DateUtil.getDay());
		pd.put("create_id", getUserInfo().getUSER_ID());
		pd.put("xm", pd.getString("phone"));
		pd.put("checkin_date", DateUtil.getDay());
		pd.put("checkin_type", "1");
		try {
			// 获取session验证码比对
			String code = session.getAttribute("code").toString();
			Long s = (System.currentTimeMillis() - Long.valueOf(String.valueOf(session.getAttribute("time"))).longValue()) / (1000 * 60);
			if (!pd.getString("code").equals(code)) {
				// 验证码不对
				msg = "codeError";
			} else if (s > 5) {
				// 验证码操作5分钟
				msg = "codeTimeOut";
			} else {
				registerService.save(pd);
			}
		} catch (Exception e) {
			msg = "error";
			logger.error(ErrorUtils.getErrorMessage(e, "学员注册异常!"));
			e.printStackTrace();
		}
		map.put("msg", msg);
		return AppUtil.returnObject(new PageData(), map);
	}

	/**
	 * 发送注册手机短信
	 * 
	 * @param
	 */
	@RequestMapping(value = "/sendSms")
	@ResponseBody
	public Object sendSms(HttpSession session) {
		Map<String, String> map = new HashMap<String, String>();
		String msg = "";
		PageData pd = new PageData();
		pd = this.getPageData();
		try {
			int code = SmsUtil.sendSmsInfo(pd.getString("mobile"));
			if (code != 0) {
				// 将手机短信码放入session
				session.setAttribute("code", code);
				session.setAttribute("time", System.currentTimeMillis());
				msg = "success";
			}
		} catch (ClientException e) {
			msg = "error";
			logger.error(ErrorUtils.getErrorMessage(e, "发送注册短信异常!"));
		}
		map.put("msg", msg);
		return AppUtil.returnObject(new PageData(), map);
	}

	/**
	 * 去修改页面
	 * 
	 * @param
	 */
	@RequestMapping(value = "/goEdit")
	public ModelAndView goEdit() {
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		String type = pd.getString("type");
		String currentPage = pd.getString("currentPage");
		try {
			pd = registerService.findById(pd);
		} catch (Exception e) {
			logger.error(ErrorUtils.getErrorMessage(e, "查询学员报名信息异常!"));
			e.printStackTrace();
		} // 根据ID读取
		pd.put("type", type);
		mv.addObject("pd", pd); // 放入视图容器
		mv.addObject("currentPage", currentPage);
		mv.setViewName("edu/student/student_edit");
		mv.addObject("msg", "edit");
		return mv;
	}

	/**
	 * 修改学校
	 * 
	 * @param
	 */
	@RequestMapping(value = "/edit")
	@ResponseBody
	public Object edit() {
		Map<String, String> map = new HashMap<String, String>();
		String msg = "success";
		PageData pd = new PageData();
		pd = this.getPageData();
		pd.put("createName", getUserInfo().getNAME());
		pd.put("createId", getUserInfo().getUSER_ID());
		try {
			registerService.edit(pd);
		} catch (Exception e) {
			msg = "error";
			logger.error(ErrorUtils.getErrorMessage(e, "修改学员报名信息异常!"));
			e.printStackTrace();
		}
		map.put("msg", msg);
		return AppUtil.returnObject(new PageData(), map);
	}

	/**
	 * 删除学员报名信息
	 */
	@RequestMapping(value = "/delete")
	@ResponseBody
	public Object delete() {
		Map<String, String> map = new HashMap<String, String>();
		PageData pd = getPageData();
		String resultInfo = "success";
		try {
			registerService.delete(pd);
		} catch (Exception e) {
			resultInfo = "error";
			logger.error(ErrorUtils.getErrorMessage(e, "删除学员报名信息异常!"));
		}
		map.put("result", resultInfo);
		return AppUtil.returnObject(new PageData(), map);
	}

	@InitBinder
	public void initBinder(WebDataBinder binder) {
		DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
		binder.registerCustomEditor(Date.class, new CustomDateEditor(format, true));
	}
}
