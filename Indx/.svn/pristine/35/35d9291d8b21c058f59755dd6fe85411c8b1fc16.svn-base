package com.zhimu.controller.manager.edu.notice;

import com.zhimu.commons.constant.Const;
import com.zhimu.commons.utils.AppUtil;
import com.zhimu.commons.utils.DateUtil;
import com.zhimu.commons.utils.ErrorUtils;
import com.zhimu.commons.utils.PageData;
import com.zhimu.controller.manager.base.BaseController;
import com.zhimu.dao.entity.message.Message;
import com.zhimu.dao.entity.system.Page;
import com.zhimu.dao.entity.system.User;
import com.zhimu.dao.enums.MessageType;
import com.zhimu.dao.utils.Jurisdiction;
import com.zhimu.service.manager.message.MessageManager;
import org.apache.shiro.session.Session;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import javax.annotation.Resource;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * 公告管理的控制层
 *
 * @author Liang Wenchao
 * @create 2018/1/10 10:02
 **/
@Controller
@RequestMapping(value = "/notice")
public class NoticeController extends BaseController {

    @Resource(name = "messageService")
    private MessageManager messageService;

    /**
     * 公告列表
     * @param page
     * @return
     */
    @RequestMapping(value = "/list")
    public ModelAndView list(Page page) {
        ModelAndView mv = this.getModelAndView();
        PageData pd = new PageData();
        pd = this.getPageData();
        String keywords = pd.getString("keywords"); // 检索条件
        if (null != keywords && !"".equals(keywords)) {
            pd.put("keywords", keywords.trim());
        }
        List<PageData> noticeList = new ArrayList<PageData>();
        try {
            // 放入当前用户id
            pd.put("username", this.getUserInfo().getUSERNAME());
            page.setPd(pd);
            noticeList = messageService.listPageByUser(page);
        } catch (Exception e) {
            logger.error(ErrorUtils.getErrorMessage(e, "获取公告列表异常!"));
        } // 列表
        mv.setViewName("edu/notice/notice_list");
        mv.addObject("noticeList", noticeList);
        return mv;
    }

    /**
     * 去新增页面
     *
     * @param
     * @throws Exception
     */
    @RequestMapping(value = "/goAdd")
    public ModelAndView goAdd() {
        ModelAndView mv = this.getModelAndView();
        PageData pd = new PageData();
        pd = this.getPageData();
        mv.addObject("currentPage", pd.get("currentPage"));
        mv.addObject("msg", "save");
        mv.setViewName("edu/notice/notice_edit");
        return mv;
    }

    /**
     * 保存公告
     *
     * @param
     * @throws Exception
     */
    @RequestMapping(value = "/save")
    @ResponseBody
    public Object save(Message message) {
        Map<String, String> map = new HashMap<String, String>();
        String msg = "success";
        try {
            message.setType(MessageType.NOTICE.toString());
            messageService.sendMessage(message);
        } catch (Exception e) {
            msg = "error";
            logger.error(ErrorUtils.getErrorMessage(e, "保存发送公告消息异常!"));
        }
        map.put("result", msg);
        return AppUtil.returnObject(new PageData(), map);
    }

    /**
     * 去修改页面
     *
     * @param
     * @throws Exception
     */
    @RequestMapping(value = "/goEdit")
    public ModelAndView goEdit() {
        ModelAndView mv = this.getModelAndView();
        PageData pd = this.getPageData();
        String type = pd.getString("type");
        String currentPage = pd.getString("currentPage");
        Message message = null;
        try {
            message = messageService.findById(pd.getString("id" )); // 根据ID读取
        } catch (Exception e) {
            logger.error(ErrorUtils.getErrorMessage(e, "去公告编辑页面异常!"));
        }
        pd.put("type", type);
        mv.addObject("pd", pd); // 放入视图容器
        mv.addObject("message", message); // 放入消息
        mv.addObject("currentPage", currentPage);
        mv.setViewName("edu/notice/notice_edit");
        mv.addObject("msg", "edit");
        return mv;
    }

    /**
     * 修改公告
     *
     * @param
     * @throws Exception
     */
    @RequestMapping(value = "/edit")
    @ResponseBody
    public Object edit(Message message) {
        Map<String, String> map = new HashMap<String, String>();
        String msg = "success";
        User user = getUserInfo();
        try {
            message.setUpdateBy(user.getUSERNAME());
            message.setUpdateTime(DateUtil.getTime());

            messageService.edit(message);
        } catch (Exception e) {
            msg = "error";
            logger.error(ErrorUtils.getErrorMessage(e, "修改公告异常!"));
        }
        map.put("result", msg);
        return AppUtil.returnObject(new PageData(), map);
    }

    /**
     * 删除学校
     */
    @RequestMapping(value = "/delete")
    @ResponseBody
    public Object delete(@RequestParam String id) {
        Map<String, String> map = new HashMap<String, String>();
        PageData pd = getPageData();
        String resultInfo = "success";
        try {
            messageService.delete(id);
        } catch (Exception e) {
            resultInfo = "error";
            logger.error(ErrorUtils.getErrorMessage(e, "删除公告异常!"));
        }
        map.put("result", resultInfo);
        return AppUtil.returnObject(new PageData(), map);
    }

    @InitBinder
    public void initBinder(WebDataBinder binder) {
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        binder.registerCustomEditor(Date.class, new CustomDateEditor(format, true));
    }
}
