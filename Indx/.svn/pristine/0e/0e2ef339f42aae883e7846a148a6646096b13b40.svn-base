package com.zhimu.service.manager.edu.activity.impl;

import com.zhimu.commons.constant.Const;
import com.zhimu.commons.constant.NoticeConstant;
import com.zhimu.commons.utils.PageData;
import com.zhimu.commons.utils.UuidUtil;
import com.zhimu.dao.DaoSupport;
import com.zhimu.dao.entity.message.Message;
import com.zhimu.dao.entity.system.Page;
import com.zhimu.dao.entity.system.User;
import com.zhimu.dao.enums.MessageStatus;
import com.zhimu.dao.enums.MessageType;
import com.zhimu.dao.utils.Jurisdiction;
import com.zhimu.service.manager.edu.activity.ActivityManager;
import com.zhimu.service.manager.edu.activityGroup.ActivityGroupService;
import com.zhimu.service.manager.edu.school.SchoolService;
import com.zhimu.service.manager.edu.student.StudentService;
import com.zhimu.service.manager.edu.teacher.TeacherManager;
import com.zhimu.service.manager.message.MessageManager;
import org.apache.commons.lang.StringUtils;
import org.apache.shiro.session.Session;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.List;

/**
 * 活动管理服务层_lwc
 */
@Service("activityService")
public class ActivityService implements ActivityManager {

	@Resource(name = "daoSupport")
	private DaoSupport dao;
	@Resource(name = "schoolService")
	private SchoolService schoolService;
	@Resource(name = "studentService")
	private StudentService studentService;
	@Resource(name = "teacherService")
	private TeacherManager teacherService;
	@Resource(name = "messageService")
	private MessageManager messageService;
	@Resource(name = "activityGroupService")
	private ActivityGroupService activityGroupService;

	@Override
	public List<PageData> listPage(Page pd) throws Exception {

		return (List<PageData>) dao.findForList("ActivityMapper.listPage", pd);

	}

	/**
	 * 保存活动
	 *
	 * @param pd
	 * @throws Exception
	 */
	@Override
	public void add(PageData pd) throws Exception {
		dao.save("ActivityMapper.save", pd);

		// 发送消息推送
		String id = pd.getString("id");
		String url = "activity/toSelect.do?id=" + id;
		Message msg = new Message(url, pd.getString("name"), pd.getString("content"), id,
				"", "", MessageType.ACTIVITY.toString(), MessageStatus.NO_SEND
				.toString(), "", pd.getString("activity_start_time"));
		msg.setWorkType(MessageType.ACTIVITY.toString());

		PageData groupPd = new PageData(); // 用作保存活动参与人员分组的pagedata
		groupPd.put("activity_id", id); // 活动id
		String needCheck = pd.getString("need_check");
		groupPd.put("need_check", needCheck); // 是否需要审核
		groupPd.put("check_state", '0'); // 待提交审核状态
		groupPd.put("activity_location", pd.getString("activity_location")); // 活动地点
		groupPd.put("school_id", pd.getString("school_id")); // 活动学校id
		groupPd.put("school_name", pd.getString("school_name")); // 活动学校地点

		String target = pd.getString("target");
		if (StringUtils.isNotBlank(target)){

			String personIds = pd.getString("selectId"); // 前台传过来的id
			String[] personArr = null;
			String schoolIds = this.getSchoolId(); // 获取当前用户所有学校id
			PageData pageData = new PageData();
			List<PageData> people = new ArrayList<>();

			// 获取前台传过来的目标对象类型, 根据不同的类型获取相应的人员进项消息保存
			if (target.equals(NoticeConstant.ALL_PEOPLE.getValue())){ // 所有人
				pageData.put("array",schoolIds.split(","));
				pageData.put("sId",schoolIds);
				people.addAll(studentService.findBySid(pageData)); // 所有学员
				people.addAll(teacherService.findBySchools(pageData)); // 所有老师
			}else if(target.equals(NoticeConstant.ALL_TEACHER.getValue())){ // 所有老师
				people.addAll(teacherService.findBySchools(pageData));
			}else if(target.equals(NoticeConstant.ALL_STUDENT.getValue())){ // 所有学员
				people.addAll(studentService.findBySid(pageData));
			}else if(target.equals(NoticeConstant.CAMPUS.getValue())){ // 校区
				if (StringUtils.isNotBlank(personIds)){
					pageData.put("array",personIds.split(","));
					pageData.put("sId",personIds);
					people.addAll(studentService.findBySid(pageData)); // 所有学员
					people.addAll(teacherService.findBySchools(pageData)); // 所有老师
				}

			}else if(target.equals(NoticeConstant.CLASS_AND_GRADE.getValue())){ // 班级
				if (StringUtils.isNotBlank(personIds)){
					people.addAll(studentService.findByCid(personIds)); // 班上的同学
				}
			}else{ // 人员
				if (StringUtils.isNotBlank(personIds)){
					personArr = personIds.split(",");
					for (int i = 0; i <personArr.length ; i++) {
						String messageId = UuidUtil.get32UUID();
						String userId = personArr[i];
						msg.setId(messageId);
						msg.setUserId(userId);
						messageService.sendMessage(msg); // 发送推送消息

						// 保存活动团队
						groupPd.put("id", messageId);
						groupPd.put("user_id", userId);
						activityGroupService.add(groupPd);
					}
				}
			}
			if(!people.isEmpty()){
				for (PageData pagedata : people) {
					String messageId = UuidUtil.get32UUID();
					msg.setId(messageId);
					String userId = pagedata.getString("id");
					msg.setUserId(userId);
					messageService.sendMessage(msg); // 发送推送消息
					// 保存活动团队
					groupPd.put("id", messageId);
					groupPd.put("user_id", userId);
					activityGroupService.add(groupPd);
				}
			}
		}
	}


	/**
	 * 获取用户所有学校id
	 * @return
	 * @throws Exception
	 */
	public String getSchoolId() throws Exception {
		PageData pageData = new PageData();
		List<PageData> schools = new ArrayList<>();
		// 获取到当前登录用户所属的学校
		Session session = Jurisdiction.getSession();
		User user = (User) session.getAttribute(Const.SESSION_USER);
		pageData.put("array", user.getSchoolId().split(","));
		List<PageData> school = schoolService.findByIdArr(pageData);
		schools.addAll(school);

		for (PageData pd: school) {
			String type = pd.getString("type");
			// 如果学校类型为空则寻找它的分校区
			if (type.isEmpty()) {
				List<PageData> subSchools = schoolService.listSubSchools(pd.getString("id"));
				schools.addAll(subSchools);
			}
		}
		String schoolIds = "";
		for (int i = 0; i < schools.size(); i++) {
			if (i == schools.size()-1){
				schoolIds += schools.get(i).getString("id");
			}else {
				schoolIds += schools.get(i).getString("id")+",";
			}
		}
		return schoolIds;
	}

	/**
	 * 根据id查询
	 *
	 * @param pd
	 * @return
	 * @throws Exception
	 */
	@Override
	public PageData findObjectById(PageData pd) throws Exception {
		return (PageData)dao.findForObject("ActivityMapper.findById", pd);
	}

	/**
	 * 编辑
	 *
	 * @param pd
	 * @return
	 * @throws Exception
	 */
	@Override
	public void edit(PageData pd) throws Exception {
		dao.update("ActivityMapper.edit", pd);
	}

	/**
	 * 删除
	 *
	 * @param id
	 * @throws Exception
	 */
	@Override
	public void deleteById(String id) throws Exception {
		dao.delete("ActivityMapper.deleteById", id);
	}


}
