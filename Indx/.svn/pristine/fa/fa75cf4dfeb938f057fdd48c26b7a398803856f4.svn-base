package com.zhimu.controller.manager.edu.lesson;

import com.zhimu.commons.utils.AppUtil;
import com.zhimu.commons.utils.ErrorUtils;
import com.zhimu.commons.utils.PageData;
import com.zhimu.controller.manager.base.BaseController;
import com.zhimu.dao.entity.system.Page;
import com.zhimu.service.manager.edu.dept.impl.DeptService;
import com.zhimu.service.manager.edu.lesson.impl.LessonService;
import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import javax.annotation.Resource;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
@RequestMapping(value = "/lesson")
public class LessonController extends BaseController {

  @Resource(name = "lessonService")
  private LessonService lessonService;

  @Resource(name = "deptService")
  private DeptService deptService;

  /**
   * 课程列表
   */
  @RequestMapping(value = "/list")
  public ModelAndView list(Page page) throws Exception {
    ModelAndView mv = this.getModelAndView();
    PageData pd = getPageData();
    try {
      String keywords = pd.getString("keywords"); // 检索条件
      if (null != keywords && !"".equals(keywords)) {
        pd.put("keywords", keywords.trim());
      }
      //人员所属学校ID
      if (!StringUtils.isEmpty(getUserInfo().getSchoolId())) {
        pd.put("userSchoolIds", getUserInfo().getSchoolId().split(","));
      }
      page.setPd(pd);
      List<PageData> varList = lessonService.deptlistPage(page);
      mv.setViewName("edu/lesson/lesson_list");
      mv.addObject("varList", varList);
      mv.addObject("pd", pd);
    } catch (Exception e) {
      logger.error(ErrorUtils.getErrorMessage(e, "查询课程列表异常!"));
    }
    return mv;
  }

  /**
   * 去新增页面
   */
  @RequestMapping(value = "/goAdd")
  public ModelAndView goAdd() throws Exception {
    ModelAndView mv = this.getModelAndView();
    PageData pd = getPageData();
    pd.put("createTime", getNowTime());
    mv.addObject("pd", pd);
    mv.addObject("msg", "save");
    mv.addObject("schoolList", getSchoolList());
    mv.addObject("deptList", getDeptList(pd));
    mv.setViewName("edu/lesson/lesson_edit");
    return mv;
  }

  /**
   * 保存课程
   */
  @RequestMapping(value = "/save", method = RequestMethod.POST)
  @ResponseBody
  public Object save() {
    Map<String, String> map = new HashMap();
    PageData pd = getPageData();
    String msg;
    try {
      pd.put("name", pd.getString("name").replace(" ", ""));
      if (getReptLessonListSize(pd) == 0) {
        pd.put("id", this.get32UUID());
        // 执行保存
        lessonService.addData(pd);
        msg = "success";
      } else {
        msg = "fail";
      }
    } catch (Exception e) {
      msg = "error";
      logger.error(ErrorUtils.getErrorMessage(e, "保存课程信息异常!"));
    }
    map.put("result", msg);
    return AppUtil.returnObject(new PageData(), map);
  }

  /**
   * 去修改课程页面
   */
  @RequestMapping(value = "/goEditU")
  public ModelAndView goEditU() {
    ModelAndView mv = this.getModelAndView();
    PageData pd = getPageData();
    try {
      mv.addObject("schoolList", getSchoolList());
      mv.addObject("deptList", getDeptList(pd));
      String type = pd.getString("type");
      String currentPage = pd.getString("currentPage");
      pd = lessonService.findDataById(pd);
      pd.put("type", type);
      pd.put("currentPage", currentPage);
      mv.addObject("msg", "editU");
      mv.addObject("pd", pd);
      mv.setViewName("edu/lesson/lesson_edit");
    } catch (Exception e) {
      logger.error(ErrorUtils.getErrorMessage(e, "去修改课程页面异常!"));
    }
    return mv;
  }

  /**
   * 修改课程
   */
  @RequestMapping(value = "/editU", method = RequestMethod.POST)
  @ResponseBody
  public Object editU() throws Exception {
    Map<String, String> map = new HashMap<>();
    PageData pd = getPageData();
    String msg;
    try {
      //新课程名
      String name = pd.getString("name").replace(" ", "");
      //旧课程名
      String old_name = pd.getString("old_name").replace(" ", "");
      pd.put("name", name);
      if ((name.equals(old_name)) || (!name.equals(old_name) && getReptLessonListSize(pd) == 0)) {
        // 执行修改
        lessonService.editData(pd);
        msg = "success";
      } else {
        msg = "fail";
      }
    } catch (Exception e) {
      msg = "error";
      logger.error(ErrorUtils.getErrorMessage(e, "修改课程异常!"));
    }
    map.put("result", msg);
    return AppUtil.returnObject(new PageData(), map);
  }

  /**
   * 删除课程
   */
  @RequestMapping(value = "/deleteU")
  @ResponseBody
  public Object delete() {
    Map<String, String> map = new HashMap<>();
    PageData pd = getPageData();
    String resultInfo;
    try {
      lessonService.deleteData(pd);
      resultInfo = "success";
    } catch (Exception e) {
      resultInfo = "error";
      logger.error(ErrorUtils.getErrorMessage(e, "删除课程异常!"));
    }
    map.put("result", resultInfo);
    return AppUtil.returnObject(new PageData(), map);
  }

  /**
   * 获取系别列表
   */
  private List<PageData> getDeptList(PageData pd) throws Exception {
    return deptService.selectList(pd);
  }

  private int getReptLessonListSize(PageData pd) throws Exception {
    return lessonService.selectList(pd).size();
  }
}
