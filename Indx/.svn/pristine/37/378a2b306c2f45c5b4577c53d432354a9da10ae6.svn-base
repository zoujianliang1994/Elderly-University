package com.zhimu.controller.manager.edu.teachPlan;

import com.zhimu.commons.constant.Const;
import com.zhimu.commons.utils.*;
import com.zhimu.controller.manager.base.BaseController;
import com.zhimu.dao.entity.system.Page;
import com.zhimu.service.manager.edu.teachPlan.impl.TeachPlanService;
import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
@RequestMapping(value = "/teachPlan")
public class TeachPlanController extends BaseController {

  @Resource(name = "teachPlanService")
  private TeachPlanService teachPlanService;

  // 文件上传路径
  private String filePath = PathUtil.getClasspath() + Const.FILEPATHFILE;

  /**
   * 教学计划列表
   */
  @RequestMapping(value = "/list")
  public ModelAndView list(Page page) throws Exception {
    ModelAndView mv = this.getModelAndView();
    PageData pd = getPageData();
    try {
      String keywords = pd.getString("keywords"); // 检索条件
      if (null != keywords && !"".equals(keywords)) {
        pd.put("keywords", keywords.trim());
      }
      //获取当前登陆管理员所属学校ID
      if (!StringUtils.isEmpty(getUserInfo().getSchoolId())) {
        pd.put("userSchoolIds", getUserInfo().getSchoolId().split(","));
      }
      page.setPd(pd);
      List<PageData> varList = teachPlanService.deptlistPage(page);
      mv.setViewName("edu/teachPlan/teachPlan_list");
      mv.addObject("varList", varList);
      mv.addObject("pd", pd);
    } catch (Exception e) {
      logger.error(ErrorUtils.getErrorMessage(e, "查询教学计划列表异常!"));
    }
    return mv;
  }

  /**
   * 去新增页面
   */
  @RequestMapping(value = "/goAdd")
  public ModelAndView goAdd() throws Exception {
    ModelAndView mv = this.getModelAndView();
    PageData pd = getPageData();
    mv.addObject("pd", pd);
    mv.addObject("msg", "save");
    mv.setViewName("edu/teachPlan/teachPlan_edit");
    return mv;
  }

  /**
   * 保存教学计划
   */
  @RequestMapping(value = "/save", method = RequestMethod.POST)
  @ResponseBody
  public Object save(@RequestParam(value = "file1", required = false) MultipartFile file1, HttpServletRequest request) {
    Map<String, String> map = new HashMap<>();
    String msg;
    try {
      PageData pd = returnPageData(request);
      pd.put("id", this.get32UUID());
      pd.put("sh_type", "0");
      //附件
      if (file1 != null && !file1.isEmpty()) {
        String file_url = FileUpload.fileUp(file1, filePath, get32UUID());
        pd.put("file_url", file_url);
      }
      // 执行保存
      teachPlanService.addData(pd);
      msg = "success";
    } catch (Exception e) {
      msg = "error";
      logger.error(ErrorUtils.getErrorMessage(e, "保存教学计划信息异常!"));
    }
    map.put("result", msg);
    return AppUtil.returnObject(new PageData(), map);
  }

  /**
   * 去修改教学计划页面
   */
  @RequestMapping(value = "/goEditU")
  public ModelAndView goEditU() {
    ModelAndView mv = this.getModelAndView();
    PageData pd = getPageData();
    try {
      String type = pd.getString("type");
      String currentPage = pd.getString("currentPage");
      pd = teachPlanService.findDataById(pd);
      pd.put("type", type);
      pd.put("currentPage", currentPage);
      mv.addObject("msg", "editU");
      mv.addObject("pd", pd);
      mv.setViewName("edu/teachPlan/teachPlan_edit");
    } catch (Exception e) {
      logger.error(ErrorUtils.getErrorMessage(e, "去修改教学计划页面异常!"));
    }
    return mv;
  }

  /**
   * 修改教学计划
   */
  @RequestMapping(value = "/editU", method = RequestMethod.POST)
  @ResponseBody
  public Object editU(@RequestParam(value = "file1", required = false) MultipartFile file1, HttpServletRequest request) {
    Map<String, String> map = new HashMap<>();
    String msg;
    try {
      PageData pd = returnPageData(request);
      //附件
      if (file1 != null && !file1.isEmpty()) {
        String file_url = FileUpload.fileUp(file1, filePath, get32UUID());
        pd.put("file_url", file_url);
      }
      pd.put("sh_type", "1");
      // 执行保存
      teachPlanService.editData(pd);
      msg = "success";
    } catch (Exception e) {
      msg = "error";
      logger.error(ErrorUtils.getErrorMessage(e, "修改教学计划异常!"));
    }
    map.put("result", msg);
    return AppUtil.returnObject(new PageData(), map);
  }

  /**
   * 删除教学计划
   */
  @RequestMapping(value = "/deleteU")
  @ResponseBody
  public Object delete() {
    Map<String, String> map = new HashMap<>();
    PageData pd = getPageData();
    String resultInfo;
    try {
      teachPlanService.deleteData(pd);
      resultInfo = "success";
    } catch (Exception e) {
      resultInfo = "error";
      logger.error(ErrorUtils.getErrorMessage(e, "删除教学计划异常!"));
    }
    map.put("result", resultInfo);
    return AppUtil.returnObject(new PageData(), map);
  }
}
