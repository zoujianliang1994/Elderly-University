package com.zhimu.controller.manager.edu.school;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import net.sf.json.JSONArray;

import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.zhimu.commons.constant.Const;
import com.zhimu.commons.utils.AppUtil;
import com.zhimu.commons.utils.DateUtil;
import com.zhimu.commons.utils.ErrorUtils;
import com.zhimu.commons.utils.FileUpload;
import com.zhimu.commons.utils.PageData;
import com.zhimu.commons.utils.PathUtil;
import com.zhimu.controller.manager.base.BaseController;
import com.zhimu.dao.entity.school.SchoolAptitude;
import com.zhimu.dao.entity.system.Page;
import com.zhimu.service.manager.edu.school.SchoolAptitudeService;
import com.zhimu.service.manager.system.user.impl.UserService;

/**
 * 说明：学校资质管理
 */
@Controller
@RequestMapping(value = "/schoolaptitude")
public class SchoolAptitudeController extends BaseController {

	@Resource(name = "schoolAptitudeService")
	private SchoolAptitudeService schoolAptitudeService;
	@Resource(name = "userService")
	private UserService userService;

	/**
	 * 学校资质列表
	 * 
	 * @param page
	 * @throws Exception
	 */
	@RequestMapping(value = "/list")
	public ModelAndView list(Page page) {
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		String keywords = pd.getString("keywords"); // 检索条件
		if (null != keywords && !"".equals(keywords)) {
			pd.put("keywords", keywords.trim());
		}
		pd.put("username", getUserInfo().getUSERNAME());
		pd.put("createId", getUserInfo().getUSER_ID());
		page.setPd(pd);
		List<PageData> varList = new ArrayList<PageData>();
		try {
			varList = schoolAptitudeService.list(page);
		} catch (Exception e) {
			logger.error(ErrorUtils.getErrorMessage(e, "学校列表异常!"));
		} // 列表
		mv.setViewName("edu/school/schoolAptiude/school_aptitude_list");
		mv.addObject("varList", varList);
		return mv;
	}

	/**
	 * 去新增页面
	 * 
	 * @param
	 * @throws Exception
	 */
	@RequestMapping(value = "/goAdd")
	public ModelAndView goAdd() {
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		pd.put("pid", getUserInfo().getSchoolId());
		mv.addObject("currentPage", pd.get("currentPage"));
		mv.addObject("msg", "save");
		mv.addObject("pd", pd);
		mv.setViewName("edu/school/schoolAptiude/school_aptitude_edit");
		return mv;
	}

	/**
	 * 去学校注册页面
	 * 
	 * @param
	 * @throws Exception
	 */
	@RequestMapping(value = "/goRegister")
	public ModelAndView goRegister() {
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		mv.addObject("msg", "save");
		mv.addObject("pd", pd);
		mv.setViewName("edu/school/schoolAptiude/school_aptitude_register");
		return mv;
	}

	/**
	 * 保存学校资质
	 * 
	 * @param
	 * @throws Exception
	 */
	@RequestMapping(value = "/save")
	@ResponseBody
	public Object save(SchoolAptitude schoolAptitude, @RequestParam(value = "schoolFile", required = false) MultipartFile schoolFile) {
		Map<String, String> map = new HashMap<String, String>();
		String msg = "success";
		try {
			schoolAptitude.setStatus("1");//
			schoolAptitude.setId(this.get32UUID());
			schoolAptitude.setCreate_date(DateUtil.getDay());
			schoolAptitude.setCreate_id(getUserInfo().getUSER_ID());
			String filePath = PathUtil.getClasspath() + Const.FILEPATHFILE; // 文件上传路径
			if (null != schoolFile && !schoolFile.isEmpty()) {
				String url = FileUpload.fileUp(schoolFile, filePath, schoolFile.getOriginalFilename().split("\\.")[0] + "(" + DateUtil.getDay() + ")");
				schoolAptitude.setPhoto(url);
			}
			PageData result = schoolAptitudeService.save(schoolAptitude);
			map.put("userInfo", "管理员账号：" + result.getString("userName") + "  密码：" + result.getString("password"));
		} catch (Exception e) {
			msg = "error";
			logger.error(ErrorUtils.getErrorMessage(e, "保存学校资质异常!"));
		}
		map.put("msg", msg);
		return AppUtil.returnObject(new PageData(), map);
	}

	/**
	 * 去修改页面
	 * 
	 * @param
	 * @throws Exception
	 */
	@RequestMapping(value = "/goEdit")
	public ModelAndView goEdit() {
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		String type = pd.getString("type");
		String currentPage = pd.getString("currentPage");
		try {
			pd = schoolAptitudeService.findById(pd);
			pd.put("filePath", PathUtil.getClasspath() + Const.FILEPATHFILE + pd.getString("photo"));
		} catch (Exception e) {
			logger.error(ErrorUtils.getErrorMessage(e, "根据学校资质ID查询异常!"));
		} // 根据ID读取
		pd.put("optype", type);
		mv.addObject("pd", pd); // 放入视图容器
		mv.addObject("currentPage", currentPage);
		mv.setViewName("edu/school/schoolAptiude/school_aptitude_edit");
		mv.addObject("msg", "edit");
		return mv;
	}

	/**
	 * 去审核页面
	 * 
	 * @param
	 * @throws Exception
	 */
	@RequestMapping(value = "/goAudit")
	public ModelAndView goAudit() {
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		String currentPage = pd.getString("currentPage");
		try {
			pd = schoolAptitudeService.findById(pd);
			pd.put("filePath", PathUtil.getClasspath() + Const.FILEPATHFILE + pd.getString("photo"));
		} catch (Exception e) {
			logger.error(ErrorUtils.getErrorMessage(e, "根据学校资质ID查询异常!"));
		} // 根据ID读取
		mv.addObject("pd", pd); // 放入视图容器
		mv.addObject("currentPage", currentPage);
		mv.setViewName("edu/school/schoolAptiude/school_aptitude_audit");
		mv.addObject("msg", "audit");
		return mv;
	}

	/**
	 * 修改学校资质
	 * 
	 * @param
	 * @throws Exception
	 */
	@RequestMapping(value = "/edit")
	@ResponseBody
	public Object edit(SchoolAptitude schoolAptitude) {
		Map<String, String> map = new HashMap<String, String>();
		String msg = "success";
		try {
			schoolAptitudeService.edit(schoolAptitude);
		} catch (Exception e) {
			msg = "error";
			logger.error(ErrorUtils.getErrorMessage(e, "修改学校资质异常!"));
		}
		map.put("msg", msg);
		return AppUtil.returnObject(new PageData(), map);
	}

	/**
	 * 审核学校资质
	 * 
	 * @param
	 * @throws Exception
	 */
	@RequestMapping(value = "/audit")
	@ResponseBody
	public Object audit() {
		Map<String, String> map = new HashMap<String, String>();
		String msg = "success";
		PageData pd = new PageData();
		pd = this.getPageData();
		try {
			schoolAptitudeService.audit(pd);
		} catch (Exception e) {
			msg = "error";
			logger.error(ErrorUtils.getErrorMessage(e, "审核学校资质异常!"));
		}
		map.put("msg", msg);
		return AppUtil.returnObject(new PageData(), map);
	}

	/**
	 * 删除学校资质
	 */
	@RequestMapping(value = "/delete")
	@ResponseBody
	public Object delete() {
		Map<String, String> map = new HashMap<String, String>();
		PageData pd = getPageData();
		String resultInfo = "success";
		try {
			// 判断当前学校资质下面是否有学校信息
			PageData sPd = this.schoolAptitudeService.findBySid(pd);
			if (null != sPd) {
				resultInfo = "error";
			} else {
				schoolAptitudeService.delete(pd);
			}
		} catch (Exception e) {
			resultInfo = "error";
			logger.error(ErrorUtils.getErrorMessage(e, "删除学校资质异常!"));
		}
		map.put("result", resultInfo);
		return AppUtil.returnObject(new PageData(), map);
	}

	/**
	 * 获取当前登录用户创建的学校json数据--lwc
	 * 
	 * @return
	 */
	@RequestMapping(value = "/listSchoolsById")
	@ResponseBody
	public Object listSchoolsById() {
		Map<String, String> map = new HashMap<String, String>();
		PageData pd = getPageData();
		JSONArray arr = null;
		String json = "";
		try {
			// 获取到当前登录用户创建的学校供选择
			String userId = this.getUserInfo().getUSER_ID();
			pd.put("createId", userId);
			List<PageData> schools = schoolAptitudeService.findByCid(pd); // 获取到所有当前用户创建的学校
			arr = JSONArray.fromObject(schools);
			json = arr.toString();
			json = json.replaceAll("name", "title");
			map.put("data", json);
		} catch (Exception e) {
			logger.error(ErrorUtils.getErrorMessage(e, "获取学校资质异常!"));
		}
		return map;
	}

	@InitBinder
	public void initBinder(WebDataBinder binder) {
		DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
		binder.registerCustomEditor(Date.class, new CustomDateEditor(format, true));
	}
}
