<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="StudentInfoMapper">
	
	<!--表名 -->
	<sql id="tableName">
		edu_student
	</sql>
	<!--表名 -->
	<sql id="tableName2">
		edu_student_append
	</sql>
	<resultMap id="integer" type="java.lang.Integer">
	</resultMap>
	<!-- 字段 -->
	<sql id="Field">
		id,
		xm,
		nl,
		xb,
		mz,
		hjdz,
		czdz,
		sfz,
		zt,
		s_id,
		s_name,
		c_id,
		c_name,
		l_id,
		l_name,
		create_date,
		create_id,
		user_id,
		class_committee,
		group_name,
		group_leader,
		phone,
		semester_id,
		stu_number,
		sign_gov,
		admitted_party_date,
		edu_degree,
		join_school_date,
		tel,
		retire_date,
		retire_number,
		work_status,
		family_con_name,
		family_con_tel,
		sec_con,
		sec_con_tel,
		address,
		disease,
		photo,
		checkin_date,
		checkin_type,
		birth_day,
		province,
		city,
		country
	</sql>
	
	<!-- 字段值 -->
	<sql id="FieldValue">
		#{id},
		#{xm},
		#{nl},
		#{xb},
		#{mz},
		#{hjdz},
		#{czdz},
		#{sfz},
		#{zt},
		#{s_id},
		#{s_name},
		#{c_id},
		#{c_name},
		#{l_id},
		#{l_name},
		#{create_date},
		#{create_id},
		#{user_id},
		#{class_committee},
		#{group_name},
		#{group_leader},
		#{phone},
		#{semester_id},
		#{stu_number},
		#{sign_gov},
		#{admitted_party_date},
		#{edu_degree},
		#{join_school_date},
		#{tel},
		#{retire_date},
		#{retire_number},
		#{work_status},
		#{family_con_name},
		#{family_con_tel},
		#{sec_con},
		#{sec_con_tel},
		#{address},
		#{disease},
		#{photo},
		#{checkin_date},
		#{checkin_type},
		#{birth_day},
		#{province},
		#{city},
		#{country}
	</sql>
	
	<!-- 新增-->
	<insert id="save" parameterType="pd">
		insert into 
	<include refid="tableName"></include>
		(
	<include refid="Field"></include>
		) values (
	<include refid="FieldValue"></include>
		)
	</insert>
	
	<!-- 注册-->
	<insert id="register" parameterType="pd">
		insert into 
	<include refid="tableName"></include>
		(
			id,xm,phone,create_date,create_id,user_id,semester_id,checkin_date,checkin_type
		) values (
			#{id},#{xm},#{phone},#{create_date},#{create_id},#{user_id},#{semester_id},#{checkin_date},#{checkin_type}
		)
	</insert>
	
	<!-- 删除-->
	<delete id="delete" parameterType="pd">
		delete from
		<include refid="tableName"></include>
		where 
			id = #{id}
	</delete>
	
	<!-- 修改 -->
	<update id="edit" parameterType="pd">
		update
		<include refid="tableName"></include>
		set 
			xm = #{xm},
			xb=#{xb},
			birth_day=#{birth_day},
			sfz = #{sfz},
			phone=#{phone},
			disease=#{disease},
			hjdz=#{hjdz},
			mz=#{mz},
			nl=#{nl},
			stu_number=#{stu_number},
			join_school_date=#{join_school_date},
			family_con_name=#{family_con_name},
			family_con_tel=#{family_con_tel},
			sec_con=#{sec_con},
			sec_con_tel=#{sec_con_tel},
			address=#{address}
		where 
			id = #{id}
	</update>
	
	<!-- 通过ID获取数据 -->
	<select id="findById" parameterType="pd" resultType="pd">
		select 
		<include refid="Field"></include>
		from 
		<include refid="tableName"></include>
		where 
			id = #{id}
	</select>
	
	
	<!-- 列表 -->
	<select id="datalistPage" parameterType="page" resultType="pd">

		select
		<include refid="Field"></include>
		from
		<include refid="tableName"></include>
		WHERE
		1=1 and
		<foreach item="item" index="index" collection="pd.userSchoolIds" open="(" separator=" or" close=")">
			s_id  LIKE ('%'+'${item}'+'%')
		</foreach>
		<if test="pd.keywords != null and pd.keywords != ''"><!-- 关键词检索 -->
			and
			(
			xm LIKE ('%'+#{pd.keywords}+'%')
			or
			sfz LIKE ('%'+#{pd.keywords}+'%')
			OR
			stu_number LIKE ('%'+#{pd.keywords}+'%')
			)
		</if>
	</select>


	<!-- 列表 -->
	<select id="studentByGradeslistPage" parameterType="page" resultType="pd">
		select
		<include refid="Field"></include>
		from
		<include refid="tableName"></include>
		where

		<foreach item="item" index="index" collection="pd.gradesIds" open="(" separator=" or" close=")">
			c_id  LIKE ('%'+'${item}'+'%')
		</foreach>


		<if test="pd.keywords != null and pd.keywords != ''"><!-- 关键词检索 -->
			and
			(
			name LIKE ('%'+#{pd.keywords}+'%')
			or
			sfz LIKE ('%'+#{pd.keywords}+'%')
		</if>
	</select>


	<!-- 修改 -->
	<update id="editClassCommittee" parameterType="pd">
		update
		<include refid="tableName"></include>
		set
		class_committee = #{class_committee}
		where
		id = #{id}
	</update>

	<select id="getAllStudentBycId" parameterType="pd" resultType="pd">
	select
		*
	from
		edu_grades
	where
		id  in
	<foreach item="item" index="index" collection="gradesIds" open="(" separator=" ," close=")">
		'${item}'
	</foreach>

	</select>


	<select id="allGroupById" parameterType="String" resultType="pd">
		select
		<include refid="Field"></include>
		from
		<include refid="tableName"></include>
		where
		  c_id  LIKE ('%'+#{gId}+'%')
		  and group_leader = '1'
	</select>

	<update id="editStudentGroup" parameterType="pd">
		update
		<include refid="tableName"></include>
		set
		group_name=#{group_name},
		group_leader=#{group_leader}
		where
		id = #{id}
	</update>

	<update id="editStudentGroupLeader" parameterType="pd">
		update
		<include refid="tableName"></include>
		set
		group_leader='0'
		where
		 c_id  LIKE ('%'+#{c_id}+'%')
		and
		group_name=#{group_name}
		AND
		group_leader='1'
	</update>

	<update id="editStudentGroupAll" parameterType="pd">
		update
		<include refid="tableName"></include>
		set
		group_leader='',
		group_name=''
		where
		c_id  LIKE ('%'+#{c_id}+'%')
		and
		group_name=#{group_name}
	</update>
	<!-- 修改 -->
	<update id="editGroup" parameterType="pd">
		update
		<include refid="tableName"></include>
		set
		group_name = #{group_name},
		GROUP_leader = '0'
		where
		id = #{id}
	</update>

	<!--根据用户id查找他所有的组长_lwc-->
	<select id="findByUser" parameterType="String" resultType="pd">
		select
			c_id,semester_id
		from
			<include refid="tableName"></include>
		where
			1=1 AND zt != 3 AND
			user_id  = #{user_id}
	</select>

	<!--根据学校id查找对应所有的学生用户id_lwc-->
	<select id="findUidBySid" resultType="String">
		select
			<include refid="tableName"></include>
		from
			<include refid="tableName"></include>
		where
			1=1 AND zt != 3 AND
			s_id
		IN
		<foreach collection="sIds" separator="," open="(" close=")" item="schoolId">
			#{schoolId}
		</foreach>
	</select>

	<!--根据学校id查找对应所有的学生_lwc-->
	<select id="findBySid" parameterType="pd" resultType="pd">
		select
			id,
			xm AS name,
			nl,
			xb,
			mz,
			hjdz,
			czdz,
			sfz,
			zt,
			s_id,
			s_name,
			c_id,
			c_name,
			l_id,
			l_name,
			create_date,
			create_id,
			user_id,
			class_committee,
			group_name,
			group_leader,
			phone,
			semester_id,
			stu_number,
			sign_gov,
			admitted_party_date,
			edu_degree,
			join_school_date,
			tel,
			[type]=('学生')
		from
			<include refid="tableName"></include>
		where
			1=1 AND zt != 3 AND
			s_id
		IN
		<foreach collection="array" separator="," open="(" close=")" item="schoolId">
			#{schoolId}
		</foreach>
		<if test="keywords != null and keywords != ''"><!-- 关键词检索 -->
			and
			(
			xm LIKE ('%'+#{keywords}+'%')
			or
			sfz LIKE ('%'+#{keywords}+'%')
		</if>
	</select>

	<!--根据班级id查找对应所有的学生信息_lwc-->
	<select id="findByCid" resultType="pd">
		select
			<include refid="Field"></include>
		from
			<include refid="tableName"></include>
		where
			1=1 AND zt != 3 AND
			c_id
		IN
		<foreach collection="array" separator="," open="(" close=")" item="cId">
			#{cId}
		</foreach>
	</select>



	<!--查询班级-->
	<select id="findGradesById" parameterType="String" resultType="pd">
		SELECT
		eg.name class_name,
		eg.id,
		el.name course_name,
		eg.teacher_name course_teacher,
		eg.tuition
		FROM
		dbo.edu_grades AS eg
		INNER JOIN dbo.edu_lesson AS el ON eg.lesson_id = el.id

		where eg.id = #{gradesId}

	</select>

	<!--查询课数-->
	<select id="findGradesPlanById" parameterType="String" resultType="pd">
		SELECT top 1
		p.ks,
		p.mz_ks
		FROM
		dbo.edu_teach_plan AS p
		WHERE
		p.grade_id  = #{gradesId}
		and
		p.sh_type = 2

	</select>


	<!--查询班级开课时间-->
	<select id="findSemestersById" parameterType="String" resultType="pd">
		SELECT top 1
		ese.semester_start,
		esd.id
		FROM
		dbo.edu_grades AS eg
		INNER JOIN dbo.edu_schedule_details AS esd ON eg.id = esd.grades_id
		INNER JOIN dbo.edu_schedule AS es ON es.id = esd.schedule_id
		INNER JOIN dbo.edu_semester AS ese ON ese.id = es.semester_id
		where eg.id =  #{gradesId}

	</select>



	<!--查询班级一周上课时间-->
	<select id="getGradesWeekClass" parameterType="pd" resultType="pd">
	SELECT s.week ,
	(SELECT count(d.id) from edu_schedule_details d where d.grades_id = #{gradesId} and d.week = s.week ) dayClass
	FROM [dbo].[edu_schedule_details] s
	where s.grades_id = #{gradesId}
	GROUP BY s.week



	</select>

	<!--查询班级一周上课时间-->
	<select id="getGradesLesson" resultType="pd">

		SELECT lesson_name,grades_name,grades_id,lesson_id,lesson_periods,t from
		(SELECT
		l.name lesson_name,
		g.name grades_name,
		g.id grades_id,
		g.lesson_id,
		g.lesson_periods,

		ROW_NUMBER() over(partition by g.lesson_id ORDER BY g.lesson_periods) as t

		FROM
		dbo.edu_grades AS g
		INNER JOIN dbo.edu_lesson AS l ON g.lesson_id = l.id

		where g.id in
		<foreach collection="array" separator="," open="(" close=")" item="cId">
			#{cId}
		</foreach>

		) a  where t=1

	</select>


	<!--查询班级一周上课时间-->
	<select id="getGradesByLesson" parameterType="pd" resultType="pd">

		SELECT
		gs.status,
		gs.lesson_periods,
		gs.student_id,
		gs.grades_id,
		s.name AS semester_name,
		g.name grades_name

		FROM
		dbo.edu_grades_student AS gs
		left JOIN dbo.edu_grades AS g ON gs.grades_id = g.id
		left JOIN dbo.edu_semester AS s ON gs.semester_id = s.id
		WHERE
		g.lesson_id = #{lesson_id} AND
		gs.student_id = #{student_id}


	</select>





	<!-- 新增-->
	<insert id="addTuition" parameterType="java.util.List">
		insert into edu_tuition (
		id,
		grades_id,
		semester_id,
		event_type,
		event_time,
		pay,
		income,
		xm,
		stu_number,
		reason,
		student_id
		)
		values
		<foreach collection="list" item="item" index="index" separator="," >
			(
			#{item.id},
			#{item.grades_id},
			#{item.semester_id},
			#{item.event_type},
			#{item.event_time},
			#{item.pay},
			#{item.income},
			#{item.xm},
			#{item.stu_number},
			#{item.reason},
			#{item.student_id}
			)
		</foreach>
	</insert>





	<update id="graduation" parameterType="pd">
		update
		<include refid="tableName"></include>
		set
		c_id=replace(c_id,#{grades},'')
		where
		id = #{student_id};

		update
		edu_grades_student
		set
		status = '4'
		where
		student_id = #{student_id} AND grades_id=#{grades} and status = '1';
	</update>



	<update id="studentTransfer" parameterType="pd">
		update
		<include refid="tableName"></include>
		set
		c_id=replace(c_id,#{clrea_grades},#{grades_id})
		where
		id = #{student_id};

		update
		edu_grades_student
		set
		grades_id=#{grades_id}
		where
		student_id = #{student_id} AND grades_id=#{clrea_grades};
	</update>


	<update id="studentJoin" parameterType="pd">
		update
		<include refid="tableName"></include>
		set
		c_id=#{c_id}
		where
		id = #{id};
	</update>

	<!--  -->
</mapper>